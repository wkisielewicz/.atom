"use strict";

/**
 * Transform base 64 encoded PDF --> <a href="data:application/pdf;base64,...">
 */
Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var PDFTransformer = (function () {
  function PDFTransformer() {
    _classCallCheck(this, PDFTransformer);
  }

  _createClass(PDFTransformer, [{
    key: 'transform',

    /**
     * transform a base64 encoded PDF string into the (current) Jupyter notebook
     * version of the element. This one returns a little link you can click.
     * @param  {string} base64PDF base64 encoded PDF
     * @param  {Document} doc  A DOM (e.g. window.document)
     * @return {HTMLElement}      A link element to the given PDF
     */
    value: function transform(base64PDF, doc) {
      var a = doc.createElement('a');
      a.target = '_blank';
      a.textContent = "View PDF";
      a.href = 'data:application/pdf;base64,' + base64PDF;

      return a;
    }
  }, {
    key: 'mimetype',

    /**
     * mimetype is application/pdf
     * @return {string} application/pdf
     */
    get: function get() {
      return 'application/pdf';
    }
  }]);

  return PDFTransformer;
})();

exports.PDFTransformer = PDFTransformer;
//# sourceMappingURL=pdf.transformer.js.map