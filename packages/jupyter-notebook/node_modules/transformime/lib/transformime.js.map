{"version":3,"sources":["../src/transformime.js"],"names":[],"mappings":"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","file":"transformime.js","sourcesContent":["\"use strict\";\n\nimport {TransformerBase} from './transformer-base';\nimport {TextTransformer} from './text.transformer';\nimport {DefaultTransformer} from './default.transformer';\nimport {ImageTransformer} from './image.transformer';\nimport {HTMLTransformer} from './html.transformer';\n/**\n * Transforms mimetypes into HTMLElements\n */\nclass Transformime {\n\n    /**\n     * Public constructor\n     * @param  {TransformerBase[]} transformers       list of transformers, in reverse\n     *                                          priority order\n     */\n    constructor(transformers) {\n\n        // Initialize instance variables.\n        this.transformers = transformers || [\n            new TextTransformer(),\n            new ImageTransformer('image/png'),\n            new ImageTransformer('image/jpeg'),\n            new HTMLTransformer()\n        ];\n    }\n\n    /**\n     * Transforms a mime bundle, using the richest available representation,\n     * into an HTMLElement.\n     * @param  {any}      bundle {mimetype1: data1, mimetype2: data2, ...}\n     * @param  {Document} doc    Any of window.document, iframe.contentDocument\n     * @return {Promise<Object>}\n     */\n    transformRichest(bundle, doc) {\n        let element;\n\n        if (this.transformers.length <= 0) {\n            // Empty transformers\n            return Promise.reject(new Error(\"No transformers configured\"));\n        }\n\n        if (Object.keys(bundle).length <= 0) {\n            return Promise.reject(new Error(\"MIME Bundle empty\"));\n        }\n\n        let richTransformer;\n\n        // Choose the last transformer as the most rich\n        for (let transformer of this.transformers) {\n            if (transformer.mimetype in bundle) {\n                richTransformer = transformer;\n            }\n        }\n\n        if (richTransformer){\n            let mimetype = richTransformer.mimetype;\n            return this.transformRetainMimetype(bundle[mimetype], mimetype, doc);\n        }\n\n        return Promise.reject(new Error('Transformer(s) for ' + Object.keys(bundle).join(', ') + ' not found.'));\n    }\n\n    /**\n     * transformRetainMimetype is just like transform except it returns an\n     * object with both the mimetype and the element\n     * {\"mimetype\": mimetype, \"el\": el}\n     *\n     * @param  {any} data        Raw data\n     * @param  {string} mimetype Standard Mime type for the data\n     * @param  {Document} doc    The DOM to own the element\n     * @return {Object}          {\"mimetype\": mimetype, \"el\": el}\n     */\n    transformRetainMimetype(data, mimetype, doc) {\n        var prom = this.transform(data, mimetype, doc);\n        return prom.then(el => {\n            return {\n                \"mimetype\": mimetype,\n                \"el\": el\n            };\n        });\n    }\n\n    /**\n     * Transforms all of the mime types in a mime bundle into HTMLElements.\n     * @param  {any}      bundle {mimetype1: data1, mimetype2: data2, ...}\n     * @param  {Document} doc    Any of window.document, iframe.contentDocument\n     * @return {Promise<Object[]>}\n     */\n    transformAll(bundle, doc) {\n        var mimetypes = Object.keys(bundle);\n        var promises = mimetypes.map( mimetype => {\n            return this.transformRetainMimetype(bundle[mimetype], mimetype, doc);\n        });\n        return Promise.all(promises);\n    }\n\n    /**\n     * Transforms a specific mime type into an HTMLElement.\n     * @param  {any}    data     Raw data\n     * @param  {string} mimetype MIME type (e.g. text/html, image/png)\n     * @return {Promise<HTMLElement>}\n     */\n    transform(data, mimetype, doc) {\n        let transformer = this.getTransformer(mimetype);\n        if (transformer) {\n            // Don't assume the transformation will return a promise.  Also\n            // don't assume the transformation will succeed.\n            try {\n                return Promise.resolve(transformer.transform(data, doc));\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }\n\n        return Promise.reject(new Error('Transformer for mimetype ' + mimetype + ' not found.'));\n    }\n\n    /**\n     * Gets a transformer matching the mimetype\n     * @param  string mimetype the data type (e.g. text/plain, text/html, image/png)\n     * @return {TransformerBase} Matching transformer\n     */\n    getTransformer(mimetype) {\n        for (let transformer of this.transformers) {\n            if (mimetype === transformer.mimetype) {\n                return transformer;\n            }\n        }\n    }\n}\n\nexport default {Transformime, TransformerBase, TextTransformer, DefaultTransformer, ImageTransformer, HTMLTransformer};\n"]}