'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _transformerBase = require('./transformer-base');

var _textTransformer = require('./text.transformer');

var _defaultTransformer = require('./default.transformer');

var _imageTransformer = require('./image.transformer');

var _htmlTransformer = require('./html.transformer');

/**
 * Transforms mimetypes into HTMLElements
 */

var Transformime = (function () {

    /**
     * Public constructor
     * @param  {TransformerBase[]} transformers       list of transformers, in reverse
     *                                          priority order
     */

    function Transformime(transformers) {
        _classCallCheck(this, Transformime);

        // Initialize instance variables.
        this.transformers = transformers || [new _textTransformer.TextTransformer(), new _imageTransformer.ImageTransformer('image/png'), new _imageTransformer.ImageTransformer('image/jpeg'), new _htmlTransformer.HTMLTransformer()];
    }

    _createClass(Transformime, [{
        key: 'transformRichest',

        /**
         * Transforms a mime bundle, using the richest available representation,
         * into an HTMLElement.
         * @param  {any}      bundle {mimetype1: data1, mimetype2: data2, ...}
         * @param  {Document} doc    Any of window.document, iframe.contentDocument
         * @return {Promise<Object>}
         */
        value: function transformRichest(bundle, doc) {
            var element = undefined;

            if (this.transformers.length <= 0) {
                // Empty transformers
                return Promise.reject(new Error('No transformers configured'));
            }

            if (Object.keys(bundle).length <= 0) {
                return Promise.reject(new Error('MIME Bundle empty'));
            }

            var richTransformer = undefined;

            // Choose the last transformer as the most rich
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.transformers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var transformer = _step.value;

                    if (transformer.mimetype in bundle) {
                        richTransformer = transformer;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (richTransformer) {
                var mimetype = richTransformer.mimetype;
                return this.transformRetainMimetype(bundle[mimetype], mimetype, doc);
            }

            return Promise.reject(new Error('Transformer(s) for ' + Object.keys(bundle).join(', ') + ' not found.'));
        }
    }, {
        key: 'transformRetainMimetype',

        /**
         * transformRetainMimetype is just like transform except it returns an
         * object with both the mimetype and the element
         * {"mimetype": mimetype, "el": el}
         *
         * @param  {any} data        Raw data
         * @param  {string} mimetype Standard Mime type for the data
         * @param  {Document} doc    The DOM to own the element
         * @return {Object}          {"mimetype": mimetype, "el": el}
         */
        value: function transformRetainMimetype(data, mimetype, doc) {
            var prom = this.transform(data, mimetype, doc);
            return prom.then(function (el) {
                return {
                    'mimetype': mimetype,
                    'el': el
                };
            });
        }
    }, {
        key: 'transformAll',

        /**
         * Transforms all of the mime types in a mime bundle into HTMLElements.
         * @param  {any}      bundle {mimetype1: data1, mimetype2: data2, ...}
         * @param  {Document} doc    Any of window.document, iframe.contentDocument
         * @return {Promise<Object[]>}
         */
        value: function transformAll(bundle, doc) {
            var _this = this;

            var mimetypes = Object.keys(bundle);
            var promises = mimetypes.map(function (mimetype) {
                return _this.transformRetainMimetype(bundle[mimetype], mimetype, doc);
            });
            return Promise.all(promises);
        }
    }, {
        key: 'transform',

        /**
         * Transforms a specific mime type into an HTMLElement.
         * @param  {any}    data     Raw data
         * @param  {string} mimetype MIME type (e.g. text/html, image/png)
         * @return {Promise<HTMLElement>}
         */
        value: function transform(data, mimetype, doc) {
            var transformer = this.getTransformer(mimetype);
            if (transformer) {
                // Don't assume the transformation will return a promise.  Also
                // don't assume the transformation will succeed.
                try {
                    return Promise.resolve(transformer.transform(data, doc));
                } catch (e) {
                    return Promise.reject(e);
                }
            }

            return Promise.reject(new Error('Transformer for mimetype ' + mimetype + ' not found.'));
        }
    }, {
        key: 'getTransformer',

        /**
         * Gets a transformer matching the mimetype
         * @param  string mimetype the data type (e.g. text/plain, text/html, image/png)
         * @return {TransformerBase} Matching transformer
         */
        value: function getTransformer(mimetype) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.transformers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var transformer = _step2.value;

                    if (mimetype === transformer.mimetype) {
                        return transformer;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }]);

    return Transformime;
})();

exports['default'] = { Transformime: Transformime, TransformerBase: _transformerBase.TransformerBase, TextTransformer: _textTransformer.TextTransformer, DefaultTransformer: _defaultTransformer.DefaultTransformer, ImageTransformer: _imageTransformer.ImageTransformer, HTMLTransformer: _htmlTransformer.HTMLTransformer };
module.exports = exports['default'];
//# sourceMappingURL=transformime.js.map