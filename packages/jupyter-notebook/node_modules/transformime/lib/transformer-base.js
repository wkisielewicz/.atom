'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/**
 * Base class for Transformers. As long as a transformer adheres to this
 * interface, transformime will play happily (you don't have to extend from this
 * class)
 */

var TransformerBase = (function () {
  function TransformerBase() {
    _classCallCheck(this, TransformerBase);
  }

  _createClass(TransformerBase, [{
    key: 'transform',

    /**
     * Turns a data type into an HTML Element on a document
     * @param  {any} data           Data this transformer expects
     * @param  {Document} document  A DOM (window.document, JSDom, iframe.contentDocument)
     * @return {HTMLElement}        Representation of [data] as an HTMLElement
     */
    value: function transform(data, document) {
      throw new Error('transform not implemented');
    }
  }, {
    key: 'mimetype',

    /**
     * The mimetype for this transformer
     * @return {string} mimetype (e.g. 'text/html', 'image/png', etc.)
     */
    get: function get() {
      throw new Error('mimetype not implemented');
    }
  }]);

  return TransformerBase;
})();

exports.TransformerBase = TransformerBase;
//# sourceMappingURL=transformer-base.js.map