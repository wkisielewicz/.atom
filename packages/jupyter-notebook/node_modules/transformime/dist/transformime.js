(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _transformerBase = require('./transformer-base');

var DefaultTransformer = (function (_TransformerBase) {
    _inherits(DefaultTransformer, _TransformerBase);

    function DefaultTransformer() {
        _classCallCheck(this, DefaultTransformer);

        _get(Object.getPrototypeOf(DefaultTransformer.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(DefaultTransformer, [{
        key: 'transform',
        value: function transform(data, doc) {
            var el = doc.createElement('div');
            el.textContent = JSON.stringify(data);
            return el;
        }
    }, {
        key: 'mimetype',
        get: function get() {
            return 'unknown';
        }
    }]);

    return DefaultTransformer;
})(_transformerBase.TransformerBase);

exports.DefaultTransformer = DefaultTransformer;

},{"./transformer-base":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _transformerBase = require('./transformer-base');

var HTMLTransformer = (function (_TransformerBase) {
    _inherits(HTMLTransformer, _TransformerBase);

    function HTMLTransformer() {
        _classCallCheck(this, HTMLTransformer);

        _get(Object.getPrototypeOf(HTMLTransformer.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(HTMLTransformer, [{
        key: 'transform',
        value: function transform(data, doc) {
            var el = doc.createElement('div');
            // TODO: Pull scripts from inside, create elements for them
            el.innerHTML = data;
            return el;
        }
    }, {
        key: 'mimetype',
        get: function get() {
            return 'text/html';
        }
    }]);

    return HTMLTransformer;
})(_transformerBase.TransformerBase);

exports.HTMLTransformer = HTMLTransformer;

},{"./transformer-base":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _transformerBase = require('./transformer-base');

/**
 * Converts b64 image mimetypes to img elements.
 */

var ImageTransformer = (function (_TransformerBase) {
    _inherits(ImageTransformer, _TransformerBase);

    function ImageTransformer(mimetype) {
        _classCallCheck(this, ImageTransformer);

        _get(Object.getPrototypeOf(ImageTransformer.prototype), 'constructor', this).call(this);
        this._mimetype = mimetype;
    }

    _createClass(ImageTransformer, [{
        key: 'transform',
        value: function transform(data, doc) {
            var img = doc.createElement('img');
            img.src = 'data:' + this.mimetype + ';base64,' + data;
            return img;
        }
    }, {
        key: 'mimetype',
        get: function get() {
            return this._mimetype;
        },
        set: function set(mimetype) {
            this._mimetype = mimetype;
        }
    }]);

    return ImageTransformer;
})(_transformerBase.TransformerBase);

exports.ImageTransformer = ImageTransformer;

},{"./transformer-base":5}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _transformerBase = require('./transformer-base');

var TextTransformer = (function (_TransformerBase) {
    _inherits(TextTransformer, _TransformerBase);

    function TextTransformer() {
        _classCallCheck(this, TextTransformer);

        _get(Object.getPrototypeOf(TextTransformer.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(TextTransformer, [{
        key: 'transform',
        value: function transform(data, doc) {
            var el = doc.createElement('pre');
            el.textContent = data;
            return el;
        }
    }, {
        key: 'mimetype',
        get: function get() {
            return 'text/plain';
        }
    }]);

    return TextTransformer;
})(_transformerBase.TransformerBase);

exports.TextTransformer = TextTransformer;

},{"./transformer-base":5}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/**
 * Base class for Transformers. As long as a transformer adheres to this
 * interface, transformime will play happily (you don't have to extend from this
 * class)
 */

var TransformerBase = (function () {
  function TransformerBase() {
    _classCallCheck(this, TransformerBase);
  }

  _createClass(TransformerBase, [{
    key: 'transform',

    /**
     * Turns a data type into an HTML Element on a document
     * @param  {any} data           Data this transformer expects
     * @param  {Document} document  A DOM (window.document, JSDom, iframe.contentDocument)
     * @return {HTMLElement}        Representation of [data] as an HTMLElement
     */
    value: function transform(data, document) {
      throw new Error('transform not implemented');
    }
  }, {
    key: 'mimetype',

    /**
     * The mimetype for this transformer
     * @return {string} mimetype (e.g. 'text/html', 'image/png', etc.)
     */
    get: function get() {
      throw new Error('mimetype not implemented');
    }
  }]);

  return TransformerBase;
})();

exports.TransformerBase = TransformerBase;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _transformerBase = require('./transformer-base');

var _textTransformer = require('./text.transformer');

var _defaultTransformer = require('./default.transformer');

var _imageTransformer = require('./image.transformer');

var _htmlTransformer = require('./html.transformer');

/**
 * Transforms mimetypes into HTMLElements
 */

var Transformime = (function () {

    /**
     * Public constructor
     * @param  {TransformerBase[]} transformers       list of transformers, in reverse
     *                                          priority order
     */

    function Transformime(transformers) {
        _classCallCheck(this, Transformime);

        // Initialize instance variables.
        this.transformers = transformers || [new _textTransformer.TextTransformer(), new _imageTransformer.ImageTransformer('image/png'), new _imageTransformer.ImageTransformer('image/jpeg'), new _htmlTransformer.HTMLTransformer()];
    }

    _createClass(Transformime, [{
        key: 'transformRichest',

        /**
         * Transforms a mime bundle, using the richest available representation,
         * into an HTMLElement.
         * @param  {any}      bundle {mimetype1: data1, mimetype2: data2, ...}
         * @param  {Document} doc    Any of window.document, iframe.contentDocument
         * @return {Promise<Object>}
         */
        value: function transformRichest(bundle, doc) {
            var element = undefined;

            if (this.transformers.length <= 0) {
                // Empty transformers
                return Promise.reject(new Error('No transformers configured'));
            }

            if (Object.keys(bundle).length <= 0) {
                return Promise.reject(new Error('MIME Bundle empty'));
            }

            var richTransformer = undefined;

            // Choose the last transformer as the most rich
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.transformers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var transformer = _step.value;

                    if (transformer.mimetype in bundle) {
                        richTransformer = transformer;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (richTransformer) {
                var mimetype = richTransformer.mimetype;
                return this.transformRetainMimetype(bundle[mimetype], mimetype, doc);
            }

            return Promise.reject(new Error('Transformer(s) for ' + Object.keys(bundle).join(', ') + ' not found.'));
        }
    }, {
        key: 'transformRetainMimetype',

        /**
         * transformRetainMimetype is just like transform except it returns an
         * object with both the mimetype and the element
         * {"mimetype": mimetype, "el": el}
         *
         * @param  {any} data        Raw data
         * @param  {string} mimetype Standard Mime type for the data
         * @param  {Document} doc    The DOM to own the element
         * @return {Object}          {"mimetype": mimetype, "el": el}
         */
        value: function transformRetainMimetype(data, mimetype, doc) {
            var prom = this.transform(data, mimetype, doc);
            return prom.then(function (el) {
                return {
                    'mimetype': mimetype,
                    'el': el
                };
            });
        }
    }, {
        key: 'transformAll',

        /**
         * Transforms all of the mime types in a mime bundle into HTMLElements.
         * @param  {any}      bundle {mimetype1: data1, mimetype2: data2, ...}
         * @param  {Document} doc    Any of window.document, iframe.contentDocument
         * @return {Promise<Object[]>}
         */
        value: function transformAll(bundle, doc) {
            var _this = this;

            var mimetypes = Object.keys(bundle);
            var promises = mimetypes.map(function (mimetype) {
                return _this.transformRetainMimetype(bundle[mimetype], mimetype, doc);
            });
            return Promise.all(promises);
        }
    }, {
        key: 'transform',

        /**
         * Transforms a specific mime type into an HTMLElement.
         * @param  {any}    data     Raw data
         * @param  {string} mimetype MIME type (e.g. text/html, image/png)
         * @return {Promise<HTMLElement>}
         */
        value: function transform(data, mimetype, doc) {
            var transformer = this.getTransformer(mimetype);
            if (transformer) {
                // Don't assume the transformation will return a promise.  Also
                // don't assume the transformation will succeed.
                try {
                    return Promise.resolve(transformer.transform(data, doc));
                } catch (e) {
                    return Promise.reject(e);
                }
            }

            return Promise.reject(new Error('Transformer for mimetype ' + mimetype + ' not found.'));
        }
    }, {
        key: 'getTransformer',

        /**
         * Gets a transformer matching the mimetype
         * @param  string mimetype the data type (e.g. text/plain, text/html, image/png)
         * @return {TransformerBase} Matching transformer
         */
        value: function getTransformer(mimetype) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.transformers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var transformer = _step2.value;

                    if (mimetype === transformer.mimetype) {
                        return transformer;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }]);

    return Transformime;
})();

exports['default'] = { Transformime: Transformime, TransformerBase: _transformerBase.TransformerBase, TextTransformer: _textTransformer.TextTransformer, DefaultTransformer: _defaultTransformer.DefaultTransformer, ImageTransformer: _imageTransformer.ImageTransformer, HTMLTransformer: _htmlTransformer.HTMLTransformer };
module.exports = exports['default'];

},{"./default.transformer":1,"./html.transformer":2,"./image.transformer":3,"./text.transformer":4,"./transformer-base":5}]},{},[1,2,3,4,5,6]);
