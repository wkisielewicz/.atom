import { ISignal } from 'phosphor/lib/core/signaling';
import { IKernel, Kernel } from './kernel';
/**
 * An implementation of a kernel manager.
 */
export declare class KernelManager implements Kernel.IManager {
    /**
     * Construct a new kernel manager.
     *
     * @param options - The default options for kernel.
     */
    constructor(options?: Kernel.IOptions);
    /**
     * A signal emitted when the specs change.
     */
    specsChanged: ISignal<Kernel.IManager, Kernel.ISpecModels>;
    /**
     * A signal emitted when the running kernels change.
     */
    runningChanged: ISignal<Kernel.IManager, Kernel.IModel[]>;
    /**
     * Test whether the terminal manager is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Dispose of the resources used by the manager.
     */
    dispose(): void;
    /**
     * Get the kernel specs.  See also [[getKernelSpecs]].
     *
     * @param options - Overrides for the default options.
     */
    getSpecs(options?: Kernel.IOptions): Promise<Kernel.ISpecModels>;
    /**
     * List the running kernels.  See also [[listRunningKernels]].
     *
     * @param options - Overrides for the default options.
     */
    listRunning(options?: Kernel.IOptions): Promise<Kernel.IModel[]>;
    /**
     * Start a new kernel.  See also [[startNewKernel]].
     *
     * @param options - Overrides for the default options.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    startNew(options?: Kernel.IOptions): Promise<IKernel>;
    /**
     * Find a kernel by id.
     *
     * @param options - Overrides for the default options.
     */
    findById(id: string, options?: Kernel.IOptions): Promise<Kernel.IModel>;
    /**
     * Connect to a running kernel.  See also [[connectToKernel]].
     *
     * @param options - Overrides for the default options.
     */
    connectTo(id: string, options?: Kernel.IOptions): Promise<IKernel>;
    /**
     * Shut down a kernel by id.
     *
     * @param options - Overrides for the default options.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    shutdown(id: string, options?: Kernel.IOptions): Promise<void>;
    /**
     * Get optionally overidden options.
     */
    private _getOptions(options);
    private _options;
    private _running;
    private _spec;
    private _isDisposed;
}
