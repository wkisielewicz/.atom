// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var json_1 = require('phosphor/lib/algorithm/json');
var signaling_1 = require('phosphor/lib/core/signaling');
var utils = require('../utils');
var kernel_1 = require('./kernel');
/**
 * An implementation of a kernel manager.
 */
var KernelManager = (function () {
    /**
     * Construct a new kernel manager.
     *
     * @param options - The default options for kernel.
     */
    function KernelManager(options) {
        this._options = null;
        this._running = [];
        this._spec = null;
        this._isDisposed = false;
        this._options = utils.copy(options || {});
    }
    Object.defineProperty(KernelManager.prototype, "isDisposed", {
        /**
         * Test whether the terminal manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    KernelManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.clearSignalData(this);
        this._spec = null;
        this._running = [];
    };
    /**
     * Get the kernel specs.  See also [[getKernelSpecs]].
     *
     * @param options - Overrides for the default options.
     */
    KernelManager.prototype.getSpecs = function (options) {
        var _this = this;
        return kernel_1.Kernel.getSpecs(this._getOptions(options)).then(function (specs) {
            if (!json_1.deepEqual(specs, _this._spec)) {
                _this._spec = specs;
                _this.specsChanged.emit(specs);
            }
            return specs;
        });
    };
    /**
     * List the running kernels.  See also [[listRunningKernels]].
     *
     * @param options - Overrides for the default options.
     */
    KernelManager.prototype.listRunning = function (options) {
        var _this = this;
        return kernel_1.Kernel.listRunning(this._getOptions(options)).then(function (running) {
            if (!json_1.deepEqual(running, _this._running)) {
                _this._running = running.slice();
                _this.runningChanged.emit(running);
            }
            return running;
        });
    };
    /**
     * Start a new kernel.  See also [[startNewKernel]].
     *
     * @param options - Overrides for the default options.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    KernelManager.prototype.startNew = function (options) {
        return kernel_1.Kernel.startNew(this._getOptions(options));
    };
    /**
     * Find a kernel by id.
     *
     * @param options - Overrides for the default options.
     */
    KernelManager.prototype.findById = function (id, options) {
        return kernel_1.Kernel.findById(id, this._getOptions(options));
    };
    /**
     * Connect to a running kernel.  See also [[connectToKernel]].
     *
     * @param options - Overrides for the default options.
     */
    KernelManager.prototype.connectTo = function (id, options) {
        return kernel_1.Kernel.connectTo(id, this._getOptions(options));
    };
    /**
     * Shut down a kernel by id.
     *
     * @param options - Overrides for the default options.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    KernelManager.prototype.shutdown = function (id, options) {
        return kernel_1.Kernel.shutdown(id, this._getOptions(options));
    };
    /**
     * Get optionally overidden options.
     */
    KernelManager.prototype._getOptions = function (options) {
        if (options) {
            options = utils.extend(utils.copy(this._options), options);
        }
        else {
            options = this._options;
        }
        return options;
    };
    return KernelManager;
}());
exports.KernelManager = KernelManager;
// Define the signal for the `KernelManager` class.
signaling_1.defineSignal(KernelManager.prototype, 'specsChanged');
signaling_1.defineSignal(KernelManager.prototype, 'runningChanged');
