import { ISignal } from 'phosphor/lib/core/signaling';
import { Kernel } from '../kernel';
import { ISession, Session } from './session';
/**
 * An implementation of a session manager.
 */
export declare class SessionManager implements Session.IManager {
    /**
     * Construct a new session manager.
     *
     * @param options - The default options for each session.
     */
    constructor(options?: Session.IOptions);
    /**
     * A signal emitted when the kernel specs change.
     */
    specsChanged: ISignal<SessionManager, Kernel.ISpecModels>;
    /**
     * A signal emitted when the running sessions change.
     */
    runningChanged: ISignal<SessionManager, Session.IModel[]>;
    /**
     * Test whether the terminal manager is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Dispose of the resources used by the manager.
     */
    dispose(): void;
    /**
     * Get the available kernel specs. See also [[Kernel.getSpecs]].
     *
     * @param options - Overrides for the default options.
     */
    getSpecs(options?: Session.IOptions): Promise<Kernel.ISpecModels>;
    /**
     * List the running sessions.  See also [[listRunningSessions]].
     *
     * @param options - Overrides for the default options.
     */
    listRunning(options?: Session.IOptions): Promise<Session.IModel[]>;
    /**
     * Start a new session.  See also [[startNewSession]].
     *
     * @param options - Overrides for the default options, must include a
     *   `'path'`.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    startNew(options: Session.IOptions): Promise<ISession>;
    /**
     * Find a session by id.
     */
    findById(id: string, options?: Session.IOptions): Promise<Session.IModel>;
    /**
     * Find a session by path.
     */
    findByPath(path: string, options?: Session.IOptions): Promise<Session.IModel>;
    connectTo(id: string, options?: Session.IOptions): Promise<ISession>;
    /**
     * Shut down a session by id.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    shutdown(id: string, options?: Session.IOptions): Promise<void>;
    /**
     * Get optionally overidden options.
     */
    private _getOptions(options);
    private _options;
    private _isDisposed;
    private _running;
    private _specs;
}
