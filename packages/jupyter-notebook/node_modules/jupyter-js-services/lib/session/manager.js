// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var json_1 = require('phosphor/lib/algorithm/json');
var signaling_1 = require('phosphor/lib/core/signaling');
var kernel_1 = require('../kernel');
var utils = require('../utils');
var session_1 = require('./session');
/**
 * An implementation of a session manager.
 */
var SessionManager = (function () {
    /**
     * Construct a new session manager.
     *
     * @param options - The default options for each session.
     */
    function SessionManager(options) {
        this._options = null;
        this._isDisposed = false;
        this._running = [];
        this._specs = null;
        this._options = utils.copy(options || {});
    }
    Object.defineProperty(SessionManager.prototype, "isDisposed", {
        /**
         * Test whether the terminal manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    SessionManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.clearSignalData(this);
        this._running = [];
    };
    /**
     * Get the available kernel specs. See also [[Kernel.getSpecs]].
     *
     * @param options - Overrides for the default options.
     */
    SessionManager.prototype.getSpecs = function (options) {
        var _this = this;
        return kernel_1.Kernel.getSpecs(this._getOptions(options)).then(function (specs) {
            if (!json_1.deepEqual(specs, _this._specs)) {
                _this._specs = specs;
                _this.specsChanged.emit(specs);
            }
            return specs;
        });
    };
    /**
     * List the running sessions.  See also [[listRunningSessions]].
     *
     * @param options - Overrides for the default options.
     */
    SessionManager.prototype.listRunning = function (options) {
        var _this = this;
        return session_1.Session.listRunning(this._getOptions(options)).then(function (running) {
            if (!json_1.deepEqual(running, _this._running)) {
                _this._running = running.slice();
                _this.runningChanged.emit(running);
            }
            return running;
        });
    };
    /**
     * Start a new session.  See also [[startNewSession]].
     *
     * @param options - Overrides for the default options, must include a
     *   `'path'`.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    SessionManager.prototype.startNew = function (options) {
        return session_1.Session.startNew(this._getOptions(options));
    };
    /**
     * Find a session by id.
     */
    SessionManager.prototype.findById = function (id, options) {
        return session_1.Session.findById(id, this._getOptions(options));
    };
    /**
     * Find a session by path.
     */
    SessionManager.prototype.findByPath = function (path, options) {
        return session_1.Session.findByPath(path, this._getOptions(options));
    };
    /*
     * Connect to a running session.  See also [[connectToSession]].
     */
    SessionManager.prototype.connectTo = function (id, options) {
        return session_1.Session.connectTo(id, this._getOptions(options));
    };
    /**
     * Shut down a session by id.
     *
     * #### Notes
     * This will emit [[runningChanged]] if the running kernels list
     * changes.
     */
    SessionManager.prototype.shutdown = function (id, options) {
        return session_1.Session.shutdown(id, this._getOptions(options));
    };
    /**
     * Get optionally overidden options.
     */
    SessionManager.prototype._getOptions = function (options) {
        if (options) {
            options = utils.extend(utils.copy(this._options), options);
        }
        else {
            options = this._options;
        }
        return options;
    };
    return SessionManager;
}());
exports.SessionManager = SessionManager;
// Define the signals for the `SessionManager` class.
signaling_1.defineSignal(SessionManager.prototype, 'specsChanged');
signaling_1.defineSignal(SessionManager.prototype, 'runningChanged');
