// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var signaling_1 = require('phosphor/lib/core/signaling');
var kernel_1 = require('../kernel');
var utils = require('../utils');
var validate = require('./validate');
/**
 * The url for the session service.
 */
var SESSION_SERVICE_URL = 'api/sessions';
/**
 * Session object for accessing the session REST api. The session
 * should be used to start kernels and then shut them down -- for
 * all other operations, the kernel object should be used.
 */
var DefaultSession = (function () {
    /**
     * Construct a new session.
     */
    function DefaultSession(options, id, kernel) {
        this._id = '';
        this._path = '';
        this._ajaxSettings = '';
        this._kernel = null;
        this._uuid = '';
        this._baseUrl = '';
        this._options = null;
        this._updating = false;
        this.ajaxSettings = options.ajaxSettings || {};
        this._id = id;
        this._path = options.path;
        this._baseUrl = options.baseUrl || utils.getBaseUrl();
        this._uuid = utils.uuid();
        Private.runningSessions[this._uuid] = this;
        this.setupKernel(kernel);
        this._options = utils.copy(options);
    }
    Object.defineProperty(DefaultSession.prototype, "id", {
        /**
         * Get the session id.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSession.prototype, "kernel", {
        /**
         * Get the session kernel object.
         *
         * #### Notes
         * This is a read-only property, and can be altered by [changeKernel].
         * Use the [statusChanged] and [unhandledMessage] signals on the session
         * instead of the ones on the kernel.
         */
        get: function () {
            return this._kernel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSession.prototype, "path", {
        /**
         * Get the session path.
         */
        get: function () {
            return this._path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSession.prototype, "model", {
        /**
         * Get the model associated with the session.
         */
        get: function () {
            return {
                id: this.id,
                kernel: this.kernel.model,
                notebook: {
                    path: this.path
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSession.prototype, "status", {
        /**
         * The current status of the session.
         *
         * #### Notes
         * This is a delegate to the kernel status.
         */
        get: function () {
            return this._kernel ? this._kernel.status : 'dead';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSession.prototype, "ajaxSettings", {
        /**
         * Get a copy of the default ajax settings for the session.
         */
        get: function () {
            return JSON.parse(this._ajaxSettings);
        },
        /**
         * Set the default ajax settings for the session.
         */
        set: function (value) {
            this._ajaxSettings = JSON.stringify(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSession.prototype, "isDisposed", {
        /**
         * Test whether the session has been disposed.
         */
        get: function () {
            return this._options === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Clone the current session with a new clientId.
     */
    DefaultSession.prototype.clone = function () {
        var _this = this;
        var options = this._getKernelOptions();
        return kernel_1.Kernel.connectTo(this.kernel.id, options).then(function (kernel) {
            options = utils.copy(_this._options);
            options.ajaxSettings = _this.ajaxSettings;
            return new DefaultSession(options, _this._id, kernel);
        });
    };
    /**
     * Update the session based on a session model from the server.
     */
    DefaultSession.prototype.update = function (model) {
        var _this = this;
        // Avoid a race condition if we are waiting for a REST call return.
        if (this._updating) {
            return Promise.resolve(void 0);
        }
        if (this._path !== model.notebook.path) {
            this.pathChanged.emit(model.notebook.path);
        }
        this._path = model.notebook.path;
        if (model.kernel.id !== this._kernel.id) {
            var options = this._getKernelOptions();
            options.name = model.kernel.name;
            return kernel_1.Kernel.connectTo(model.kernel.id, options).then(function (kernel) {
                _this.setupKernel(kernel);
                _this.kernelChanged.emit(kernel);
            });
        }
        return Promise.resolve(void 0);
    };
    /**
     * Dispose of the resources held by the session.
     */
    DefaultSession.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        if (this._kernel) {
            this._kernel.dispose();
        }
        this.sessionDied.emit(void 0);
        this._options = null;
        delete Private.runningSessions[this._uuid];
        this._kernel = null;
        signaling_1.clearSignalData(this);
    };
    /**
     * Change the session path.
     *
     * @param path - The new session path.
     *
     * #### Notes
     * This uses the Jupyter REST API, and the response is validated.
     * The promise is fulfilled on a valid response and rejected otherwise.
     */
    DefaultSession.prototype.rename = function (path) {
        if (this.isDisposed) {
            return Promise.reject(new Error('Session is disposed'));
        }
        var data = JSON.stringify({
            notebook: { path: path }
        });
        return this._patch(data).then(function () { return void 0; });
    };
    /**
     * Change the kernel.
     *
     * @params options - The name or id of the new kernel.
     *
     * #### Notes
     * This shuts down the existing kernel and creates a new kernel,
     * keeping the existing session ID and session path.
     */
    DefaultSession.prototype.changeKernel = function (options) {
        var _this = this;
        if (this.isDisposed) {
            return Promise.reject(new Error('Session is disposed'));
        }
        this._kernel.dispose();
        var data = JSON.stringify({ kernel: options });
        return this._patch(data).then(function () {
            return _this.kernel;
        });
    };
    /**
     * Kill the kernel and shutdown the session.
     *
     * @returns - The promise fulfilled on a valid response from the server.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.
     * Emits a [sessionDied] signal on success.
     */
    DefaultSession.prototype.shutdown = function () {
        if (this.isDisposed) {
            return Promise.reject(new Error('Session is disposed'));
        }
        return Private.shutdownSession(this.id, this._baseUrl, this.ajaxSettings);
    };
    /**
     * Handle connections to a kernel.
     */
    DefaultSession.prototype.setupKernel = function (kernel) {
        this._kernel = kernel;
        kernel.statusChanged.connect(this.onKernelStatus, this);
        kernel.unhandledMessage.connect(this.onUnhandledMessage, this);
        kernel.iopubMessage.connect(this.onIOPubMessage, this);
    };
    /**
     * Handle to changes in the Kernel status.
     */
    DefaultSession.prototype.onKernelStatus = function (sender, state) {
        this.statusChanged.emit(state);
    };
    /**
     * Handle iopub kernel messages.
     */
    DefaultSession.prototype.onIOPubMessage = function (sender, msg) {
        this.iopubMessage.emit(msg);
    };
    /**
     * Handle unhandled kernel messages.
     */
    DefaultSession.prototype.onUnhandledMessage = function (sender, msg) {
        this.unhandledMessage.emit(msg);
    };
    /**
     * Get the options used to create a new kernel.
     */
    DefaultSession.prototype._getKernelOptions = function () {
        return {
            baseUrl: this._options.baseUrl,
            wsUrl: this._options.wsUrl,
            username: this.kernel.username,
            ajaxSettings: this.ajaxSettings
        };
    };
    /**
     * Send a PATCH to the server, updating the session path or the kernel.
     */
    DefaultSession.prototype._patch = function (data) {
        var _this = this;
        var url = Private.getSessionUrl(this._baseUrl, this._id);
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'PATCH';
        ajaxSettings.dataType = 'json';
        ajaxSettings.data = data;
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.cache = false;
        this._updating = true;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            _this._updating = false;
            if (success.xhr.status !== 200) {
                return utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateModel(data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            return Private.updateByModel(data);
        }, function (error) {
            _this._updating = false;
            return Private.onSessionError(error);
        });
    };
    return DefaultSession;
}());
exports.DefaultSession = DefaultSession;
// Define the signals for the `Session` class.
signaling_1.defineSignal(DefaultSession.prototype, 'sessionDied');
signaling_1.defineSignal(DefaultSession.prototype, 'kernelChanged');
signaling_1.defineSignal(DefaultSession.prototype, 'statusChanged');
signaling_1.defineSignal(DefaultSession.prototype, 'iopubMessage');
signaling_1.defineSignal(DefaultSession.prototype, 'unhandledMessage');
signaling_1.defineSignal(DefaultSession.prototype, 'pathChanged');
/**
 * The namespace for `DefaultSession` statics.
 */
var DefaultSession;
(function (DefaultSession) {
    /**
     * List the running sessions.
     */
    function listRunning(options) {
        return Private.listRunning(options);
    }
    DefaultSession.listRunning = listRunning;
    /**
     * Start a new session.
     */
    function startNew(options) {
        return Private.startNew(options);
    }
    DefaultSession.startNew = startNew;
    /**
     * Find a session by id.
     */
    function findById(id, options) {
        return Private.findById(id, options);
    }
    DefaultSession.findById = findById;
    /**
     * Find a session by path.
     */
    function findByPath(path, options) {
        return Private.findByPath(path, options);
    }
    DefaultSession.findByPath = findByPath;
    /**
     * Connect to a running session.
     */
    function connectTo(id, options) {
        return Private.connectTo(id, options);
    }
    DefaultSession.connectTo = connectTo;
    /**
     * Shut down a session by id.
     */
    function shutdown(id, options) {
        if (options === void 0) { options = {}; }
        return Private.shutdown(id, options);
    }
    DefaultSession.shutdown = shutdown;
})(DefaultSession = exports.DefaultSession || (exports.DefaultSession = {}));
/**
 * A namespace for session private data.
 */
var Private;
(function (Private) {
    /**
     * The running sessions.
     */
    Private.runningSessions = Object.create(null);
    /**
     * List the running sessions.
     */
    function listRunning(options) {
        if (options === void 0) { options = {}; }
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = utils.urlPathJoin(baseUrl, SESSION_SERVICE_URL);
        var ajaxSettings = utils.copy(options.ajaxSettings || {});
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                return utils.makeAjaxError(success);
            }
            if (!Array.isArray(success.data)) {
                return utils.makeAjaxError(success, 'Invalid Session list');
            }
            for (var i = 0; i < success.data.length; i++) {
                try {
                    validate.validateModel(success.data[i]);
                }
                catch (err) {
                    return utils.makeAjaxError(success, err.message);
                }
            }
            return updateRunningSessions(success.data);
        }, Private.onSessionError);
    }
    Private.listRunning = listRunning;
    /**
     * Start a new session.
     */
    function startNew(options) {
        if (options.path === void 0) {
            return Promise.reject(new Error('Must specify a path'));
        }
        return startSession(options).then(function (model) {
            return createSession(model, options);
        });
    }
    Private.startNew = startNew;
    /**
     * Find a session by id.
     */
    function findById(id, options) {
        if (options === void 0) { options = {}; }
        var sessions = Private.runningSessions;
        for (var clientId in sessions) {
            var session = sessions[clientId];
            if (session.id === id) {
                var model = {
                    id: id,
                    notebook: { path: session.path },
                    kernel: { name: session.kernel.name, id: session.kernel.id }
                };
                return Promise.resolve(model);
            }
        }
        return getSessionModel(id, options).catch(function () {
            var msg = "No running session for id: " + id;
            return typedThrow(msg);
        });
    }
    Private.findById = findById;
    /**
     * Find a session by path.
     */
    function findByPath(path, options) {
        if (options === void 0) { options = {}; }
        var sessions = Private.runningSessions;
        for (var clientId in sessions) {
            var session = sessions[clientId];
            if (session.path === path) {
                var model = {
                    id: session.id,
                    notebook: { path: session.path },
                    kernel: { name: session.kernel.name, id: session.kernel.id }
                };
                return Promise.resolve(model);
            }
        }
        return listRunning(options).then(function (models) {
            for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {
                var model = models_1[_i];
                if (model.notebook.path === path) {
                    return model;
                }
            }
            var msg = "No running session for path: " + path;
            return typedThrow(msg);
        });
    }
    Private.findByPath = findByPath;
    /**
     * Connect to a running session.
     */
    function connectTo(id, options) {
        if (options === void 0) { options = {}; }
        for (var clientId in Private.runningSessions) {
            var session = Private.runningSessions[clientId];
            if (session.id === id) {
                return session.clone();
            }
        }
        return getSessionModel(id, options).then(function (model) {
            return createSession(model, options);
        }).catch(function () {
            var msg = "No running session with id: " + id;
            return typedThrow(msg);
        });
    }
    Private.connectTo = connectTo;
    /**
     * Shut down a session by id.
     */
    function shutdown(id, options) {
        if (options === void 0) { options = {}; }
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var ajaxSettings = options.ajaxSettings || {};
        return shutdownSession(id, baseUrl, ajaxSettings);
    }
    Private.shutdown = shutdown;
    /**
     * Create a new session, or return an existing session if a session if
     * the session path already exists
     */
    function startSession(options) {
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = utils.urlPathJoin(baseUrl, SESSION_SERVICE_URL);
        var model = {
            kernel: { name: options.kernelName, id: options.kernelId },
            notebook: { path: options.path }
        };
        var ajaxSettings = utils.copy(options.ajaxSettings || {});
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        ajaxSettings.data = JSON.stringify(model);
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                return utils.makeAjaxError(success);
            }
            try {
                validate.validateModel(success.data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            var data = success.data;
            return updateByModel(data);
        }, onSessionError);
    }
    Private.startSession = startSession;
    /**
     * Create a Promise for a kernel object given a session model and options.
     */
    function createKernel(options) {
        var kernelOptions = {
            name: options.kernelName,
            baseUrl: options.baseUrl || utils.getBaseUrl(),
            wsUrl: options.wsUrl,
            username: options.username,
            clientId: options.clientId,
            ajaxSettings: options.ajaxSettings
        };
        return kernel_1.Kernel.connectTo(options.kernelId, kernelOptions);
    }
    /**
     * Create a Session object.
     *
     * @returns - A promise that resolves with a started session.
     */
    function createSession(model, options) {
        options.kernelName = model.kernel.name;
        options.kernelId = model.kernel.id;
        options.path = model.notebook.path;
        return createKernel(options).then(function (kernel) {
            return new DefaultSession(options, model.id, kernel);
        }).catch(function (error) {
            return typedThrow('Session failed to start: ' + error.message);
        });
    }
    Private.createSession = createSession;
    /**
     * Get a full session model from the server by session id string.
     */
    function getSessionModel(id, options) {
        options = options || {};
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = getSessionUrl(baseUrl, id);
        var ajaxSettings = options.ajaxSettings || {};
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                return utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateModel(data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            return updateByModel(data);
        }, Private.onSessionError);
    }
    Private.getSessionModel = getSessionModel;
    /**
     * Update the running sessions based on new data from the server.
     */
    function updateRunningSessions(sessions) {
        var promises = [];
        for (var uuid in Private.runningSessions) {
            var session = Private.runningSessions[uuid];
            var updated = false;
            for (var _i = 0, sessions_1 = sessions; _i < sessions_1.length; _i++) {
                var sId = sessions_1[_i];
                if (session.id === sId.id) {
                    promises.push(session.update(sId));
                    updated = true;
                    break;
                }
            }
            // If session is no longer running on disk, emit dead signal.
            if (!updated && session.status !== 'dead') {
                session.sessionDied.emit(void 0);
            }
        }
        return Promise.all(promises).then(function () { return sessions; });
    }
    Private.updateRunningSessions = updateRunningSessions;
    /**
     * Update the running sessions given an updated session Id.
     */
    function updateByModel(model) {
        var promises = [];
        for (var uuid in Private.runningSessions) {
            var session = Private.runningSessions[uuid];
            if (session.id === model.id) {
                promises.push(session.update(model));
            }
        }
        return Promise.all(promises).then(function () { return model; });
    }
    Private.updateByModel = updateByModel;
    /**
     * Shut down a session by id.
     */
    function shutdownSession(id, baseUrl, ajaxSettings) {
        if (ajaxSettings === void 0) { ajaxSettings = {}; }
        var url = getSessionUrl(baseUrl, id);
        ajaxSettings.method = 'DELETE';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                return utils.makeAjaxError(success);
            }
            for (var uuid in Private.runningSessions) {
                var session = Private.runningSessions[uuid];
                if (session.id === id) {
                    session.dispose();
                }
            }
        }, function (err) {
            if (err.xhr.status === 410) {
                err.throwError = 'The kernel was deleted but the session was not';
            }
            return onSessionError(err);
        });
    }
    Private.shutdownSession = shutdownSession;
    /**
     * Get a session url.
     */
    function getSessionUrl(baseUrl, id) {
        return utils.urlPathJoin(baseUrl, SESSION_SERVICE_URL, id);
    }
    Private.getSessionUrl = getSessionUrl;
    /**
     * Handle an error on a session Ajax call.
     */
    function onSessionError(error) {
        var text = (error.throwError ||
            error.xhr.statusText ||
            error.xhr.responseText);
        var msg = "API request failed: " + text;
        console.error(msg);
        return Promise.reject(error);
    }
    Private.onSessionError = onSessionError;
    /**
     * Throw a typed error.
     */
    function typedThrow(msg) {
        throw new Error(msg);
    }
    Private.typedThrow = typedThrow;
})(Private || (Private = {}));
