"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var commonmark = require("commonmark");

var MarkdownTransformer = (function () {
    function MarkdownTransformer() {
        _classCallCheck(this, MarkdownTransformer);

        this.reader = new commonmark.Parser();
        this.writer = new commonmark.HtmlRenderer({
            safe: true
        });
    }

    _createClass(MarkdownTransformer, [{
        key: "transform",
        value: function transform(data, doc) {
            var div = doc.createElement("div");
            var parsed = this.reader.parse(data);

            // TODO: Any other transformations on the parsed object
            // See https://github.com/jgm/commonmark.js#usage

            div.innerHTML = this.writer.render(parsed);

            return div;
        }
    }, {
        key: "mimetype",
        get: function get() {
            return "text/markdown";
        }
    }]);

    return MarkdownTransformer;
})();

exports.MarkdownTransformer = MarkdownTransformer;
//# sourceMappingURL=commonmark-transformer.js.map