import { ISequence } from '../algorithm/sequence';
import { Message } from '../core/messaging';
import { ISignal } from '../core/signaling';
import { Title } from './title';
import { Widget } from './widget';
/**
 * A widget which displays titles as a row of tabs.
 */
export declare class TabBar extends Widget {
    /**
     * Construct a new tab bar.
     *
     * @param options - The options for initializing the tab bar.
     */
    constructor(options?: TabBar.IOptions);
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * A signal emitted when the current tab is changed.
     *
     * #### Notes
     * This signal is emitted when the currently selected tab is changed
     * either through user or programmatic interaction.
     *
     * Notably, this signal is not emitted when the index of the current
     * tab changes due to tabs being inserted, removed, or moved. It is
     * only emitted when the actual current tab node is changed.
     */
    currentChanged: ISignal<TabBar, TabBar.ICurrentChangedArgs>;
    /**
     * A signal emitted when a tab is moved by the user.
     *
     * #### Notes
     * This signal is emitted when a tab is moved by user interaction.
     *
     * This signal is not emitted when a tab is moved programmatically.
     */
    tabMoved: ISignal<TabBar, TabBar.ITabMovedArgs>;
    /**
     * A signal emitted when a tab close icon is clicked.
     *
     * #### Notes
     * This signal is not emitted unless the tab title is `closable`.
     */
    tabCloseRequested: ISignal<TabBar, TabBar.ITabCloseRequestedArgs>;
    /**
     * A signal emitted when a tab is dragged beyond the detach threshold.
     *
     * #### Notes
     * This signal is emitted when the user drags a tab with the mouse,
     * and mouse is dragged beyond the detach threshold.
     *
     * The consumer of the signal should call `releaseMouse` and remove
     * the tab in order to complete the detach.
     *
     * This signal is only emitted once per drag cycle.
     */
    tabDetachRequested: ISignal<TabBar, TabBar.ITabDetachRequestedArgs>;
    /**
     * Get the tab bar header node.
     *
     * #### Notes
     * This node can be used to add extra content to the tab bar header.
     *
     * This is a read-only property.
     */
    headerNode: HTMLElement;
    /**
     * Get the tab bar body node.
     *
     * #### Notes
     * This node can be used to add extra content to the tab bar.
     *
     * This is a read-only property.
     */
    bodyNode: HTMLElement;
    /**
     * Get the tab bar footer node.
     *
     * #### Notes
     * This node can be used to add extra content to the tab bar footer.
     *
     * This is a read-only property.
     */
    footerNode: HTMLElement;
    /**
     * Get the tab bar content node.
     *
     * #### Notes
     * This is the node which holds the tab nodes.
     *
     * Modifying this node directly can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    contentNode: HTMLElement;
    /**
     * A read-only sequence of the titles in the tab bar.
     *
     * #### Notes
     * This is a read-only property.
     */
    titles: ISequence<Title>;
    /**
     * Get the currently selected title.
     *
     * #### Notes
     * This will be `null` if no tab is selected.
     */
    /**
     * Set the currently selected title.
     *
     * #### Notes
     * If the title does not exist, the title will be set to `null`.
     */
    currentTitle: Title;
    /**
     * Get the index of the currently selected tab.
     *
     * #### Notes
     * This will be `-1` if no tab is selected.
     */
    /**
     * Set the index of the currently selected tab.
     *
     * #### Notes
     * If the value is out of range, the index will be set to `-1`.
     */
    currentIndex: number;
    /**
     * Get whether the tabs are movable by the user.
     *
     * #### Notes
     * Tabs can be moved programmatically, irrespective of this value.
     */
    /**
     * Set whether the tabs are movable by the user.
     *
     * #### Notes
     * Tabs can be moved programmatically, irrespective of this value.
     */
    tabsMovable: boolean;
    /**
     * The renderer used by the tab bar
     *
     * #### Notes
     * This is a read-only property.
     */
    renderer: TabBar.IRenderer;
    /**
     * Add a tab to the end of the tab bar.
     *
     * @param value - The title which holds the data for the tab,
     *   or an options object to convert to a title.
     *
     * @returns The title object added to the tab bar.
     *
     * #### Notes
     * If the title is already added to the tab bar, it will be moved.
     */
    addTab(value: Title | Title.IOptions): Title;
    /**
     * Insert a tab into the tab bar at the specified index.
     *
     * @param index - The index at which to insert the tab.
     *
     * @param value - The title which holds the data for the tab,
     *   or an options object to convert to a title.
     *
     * @returns The title object added to the tab bar.
     *
     * #### Notes
     * The index will be clamped to the bounds of the tabs.
     *
     * If the title is already added to the tab bar, it will be moved.
     */
    insertTab(index: number, value: Title | Title.IOptions): Title;
    /**
     * Remove a tab from the tab bar.
     *
     * @param value - The title to remove or the index thereof.
     *
     * #### Notes
     * This is a no-op if the title is not contained in the tab bar.
     */
    removeTab(value: Title | number): void;
    /**
     * Remove all tabs from the tab bar.
     */
    clearTabs(): void;
    /**
     * Release the mouse and restore the non-dragged tab positions.
     *
     * #### Notes
     * This will cause the tab bar to stop handling mouse events and to
     * restore the tabs to their non-dragged positions.
     */
    releaseMouse(): void;
    /**
     * Handle the DOM events for the tab bar.
     *
     * @param event - The DOM event sent to the tab bar.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the tab bar's DOM node.
     *
     * This should not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'keydown'` event for the tab bar.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'click'` event for the tab bar.
     */
    private _evtClick(event);
    /**
     * Handle the `'mousedown'` event for the tab bar.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the tab bar.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the tab bar.
     */
    private _evtMouseUp(event);
    /**
     * Release the mouse and restore the non-dragged tab positions.
     */
    private _releaseMouse();
    /**
     * Handle the `changed` signal of a title object.
     */
    private _onTitleChanged(sender);
    private _currentIndex;
    private _tabsMovable;
    private _renderer;
    private _titles;
    private _dirtyTitles;
    private _tabs;
    private _dragData;
}
/**
 * The namespace for the `TabBar` class statics.
 */
export declare namespace TabBar {
    /**
     * An options object for creating a tab bar.
     */
    interface IOptions {
        /**
         * Whether the tabs are movable by the user.
         *
         * The default is `false`.
         */
        tabsMovable?: boolean;
        /**
         * A renderer to use with the tab bar.
         *
         * The default is a shared renderer instance.
         */
        renderer?: IRenderer;
    }
    /**
     * The arguments object for the `currentChanged` signal.
     */
    interface ICurrentChangedArgs {
        /**
         * The previously selected index.
         */
        previousIndex: number;
        /**
         * The previously selected title.
         */
        previousTitle: Title;
        /**
         * The currently selected index.
         */
        currentIndex: number;
        /**
         * The currently selected title.
         */
        currentTitle: Title;
    }
    /**
     * The arguments object for the `tabMoved` signal.
     */
    interface ITabMovedArgs {
        /**
         * The previous index of the tab.
         */
        fromIndex: number;
        /**
         * The current index of the tab.
         */
        toIndex: number;
        /**
         * The title for the tab.
         */
        title: Title;
    }
    /**
     * The arguments object for the `tabCloseRequested` signal.
     */
    interface ITabCloseRequestedArgs {
        /**
         * The index of the tab to close.
         */
        index: number;
        /**
         * The title for the tab.
         */
        title: Title;
    }
    /**
     * The arguments object for the `tabDetachRequested` signal.
     */
    interface ITabDetachRequestedArgs {
        /**
         * The index of the tab to detach.
         */
        index: number;
        /**
         * The title for the tab.
         */
        title: Title;
        /**
         * The current client X position of the mouse.
         */
        clientX: number;
        /**
         * The current client Y position of the mouse.
         */
        clientY: number;
    }
    /**
     * A renderer for use with a tab bar.
     */
    interface IRenderer {
        /**
         * Create a node for a tab.
         *
         * @returns A new node for a tab.
         *
         * #### Notes
         * The data in the node should be uninitialized.
         *
         * The `updateTabNode` method will be called for initialization.
         */
        createTabNode(): HTMLElement;
        /**
         * Update a tab node to reflect the state of a title.
         *
         * @param node - A node created by a call to `createTabNode`.
         *
         * @param title - The title object holding the data for the tab.
         *
         * #### Notes
         * This method should completely reset the state of the node to
         * reflect the data in the title.
         */
        updateTabNode(node: HTMLElement, title: Title): void;
        /**
         * Look up the close icon descendant node for a tab node.
         *
         * @param node - A node created by a call to `createTabNode`.
         *
         * @returns The close icon node, or `null` if none exists.
         *
         * #### Notes
         * This is used by the tab bar to detect clicks on the close icon.
         */
        closeIconNode(node: HTMLElement): HTMLElement;
    }
    /**
     * The default implementation of `IRenderer`.
     */
    class Renderer implements IRenderer {
        /**
         * Create a node for a tab.
         *
         * @returns A new node for a tab.
         */
        createTabNode(): HTMLElement;
        /**
         * Update a tab node to reflect the state of a title.
         *
         * @param node - A node created by a call to `createTabNode`.
         *
         * @param title - The title object holding the data for the tab.
         */
        updateTabNode(node: HTMLElement, title: Title): void;
        /**
         * Look up the close icon descendant node for a tab node.
         *
         * @param node - A node created by a call to `createTabNode`.
         *
         * @returns The close icon node, or `null` if none exists.
         */
        closeIconNode(node: HTMLElement): HTMLElement;
    }
    /**
     * The default `Renderer` instance.
     */
    const defaultRenderer: Renderer;
}
