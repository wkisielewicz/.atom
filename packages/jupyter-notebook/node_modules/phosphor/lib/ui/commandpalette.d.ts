import { JSONObject } from '../algorithm/json';
import { ISequence } from '../algorithm/sequence';
import { Message } from '../core/messaging';
import { KeyBinding } from './keymap';
import { Widget } from './widget';
/**
 * An object which represents a command item.
 *
 * #### Notes
 * Once created, a command item is immutable.
 */
export declare class CommandItem {
    /**
     * Construct a new command item.
     *
     * @param options - The options for initializing the command item.
     */
    constructor(options: CommandItem.IOptions);
    /**
     * The command to execute when the item is triggered.
     */
    command: string;
    /**
     * The arguments for the command.
     */
    args: JSONObject;
    /**
     * The display label for the command item.
     */
    label: string;
    /**
     * The display caption for the command item.
     */
    caption: string;
    /**
     * The extra class name for the command item.
     */
    className: string;
    /**
     * Whether the command item is enabled.
     */
    isEnabled: boolean;
    /**
     * Whether the command item is toggled.
     */
    isToggled: boolean;
    /**
     * Whether the command item is visible.
     */
    isVisible: boolean;
    /**
     * The key binding for the command item.
     */
    keyBinding: KeyBinding;
    /**
     * The category for the command item.
     */
    category: string;
    private _command;
    private _args;
    private _category;
}
/**
 * The namespace for the `CommandItem` class statics.
 */
export declare namespace CommandItem {
    /**
     * An options object for initializing a command item.
     */
    interface IOptions {
        /**
         * The command to execute when the item is triggered.
         */
        command: string;
        /**
         * The arguments for the command.
         *
         * The default value is `null`.
         */
        args?: JSONObject;
        /**
         * The category for the item.
         *
         * The default value is `'general'`.
         */
        category?: string;
    }
}
/**
 * A widget which displays command items as a searchable palette.
 */
export declare class CommandPalette extends Widget {
    /**
     * Construct a new command palette.
     */
    constructor(options?: CommandPalette.IOptions);
    /**
     * Dispose of the resources held by the command palette.
     */
    dispose(): void;
    /**
     * Get the command palette search node.
     *
     * #### Notes
     * This is the node which contains the search-related elements.
     *
     * This is a read-only property.
     */
    searchNode: HTMLElement;
    /**
     * Get the command palette input node.
     *
     * #### Notes
     * This is a read-only property.
     */
    inputNode: HTMLInputElement;
    /**
     * Get the command palette content node.
     *
     * #### Notes
     * This is the node which holds the command item nodes.
     *
     * Modifying this node directly can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    contentNode: HTMLElement;
    /**
     * A read-only sequence of the command items in the palette.
     *
     * #### Notes
     * This is a read-only property.
     */
    items: ISequence<CommandItem>;
    /**
     * The renderer used by the command palette.
     *
     * #### Notes
     * This is a read-only property.
     */
    renderer: CommandPalette.IRenderer;
    /**
     * Add a command item to the command palette.
     *
     * @param value - The command item to add to the palette, or an
     *   options object to be converted into a command item.
     *
     * @returns The command item added to the palette.
     */
    addItem(value: CommandItem | CommandItem.IOptions): CommandItem;
    /**
     * Remove a command item from the command palette.
     *
     * @param value - The item to remove or the index thereof.
     *
     * #### Notes
     * This is a no-op if the item is not contained in the palette.
     */
    removeItem(value: CommandItem | number): void;
    /**
     * Remove all command items from the command palette.
     */
    clearItems(): void;
    /**
     * Handle the DOM events for the command palette.
     *
     * @param event - The DOM event sent to the command palette.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the command palette's DOM node.
     * It should not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on a `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'click'` event for the command palette.
     */
    private _evtClick(event);
    /**
     * Handle the `'keydown'` event for the command palette.
     */
    private _evtKeyDown(event);
    /**
     * Activate the node at the given render index.
     *
     * If the node is scrolled out of view, it will be scrolled into
     * view and aligned according to the `alignTop` parameter.
     */
    private _activate(index);
    /**
     * Activate the next enabled index of the given kind.
     */
    private _activateNext(kind);
    /**
     * Activate the previous enabled index of the given kind.
     */
    private _activatePrev(kind);
    /**
     * Trigger the result part at the active index.
     *
     * If the part is an enabled command it will be executed. If the
     * part is a header, the category search term will be toggled.
     */
    private _triggerActive();
    /**
     * A signal handler for commands and keymap changes.
     *
     * #### Notes
     * This is only connected when the palette is attached.
     */
    private _onGenericChange();
    private _activeIndex;
    private _items;
    private _itemNodes;
    private _headerNodes;
    private _result;
    private _renderer;
}
/**
 * The namespace for the `CommandPalette` class statics.
 */
export declare namespace CommandPalette {
    /**
     * An options object for creating a command palette.
     */
    interface IOptions {
        /**
         * A custom renderer for use with the command palette.
         *
         * The default is a shared renderer instance.
         */
        renderer?: IRenderer;
    }
    /**
     * A renderer for use with a command palette.
     */
    interface IRenderer {
        /**
         * Create a node for a section header.
         *
         * @returns A new node for a section header.
         *
         * #### Notes
         * The data in the node should be uninitialized.
         *
         * The `updateHeaderNode` method will be called for initialization.
         */
        createHeaderNode(): HTMLElement;
        /**
         * Create a node for a command item.
         *
         * @returns A new node for a command item.
         *
         * #### Notes
         * The data in the node should be uninitialized.
         *
         * The `updateItemNode` method will be called for initialization.
         */
        createItemNode(): HTMLElement;
        /**
         * Update a header node to reflect the given data..
         *
         * @param node - A node created by a call to `createHeaderNode`.
         *
         * @param markup - The markup for the header text. This is the
         *   section category text interpolated with `<mark>` tags for
         *   the matching search characters.
         *
         * #### Notes
         * This method should completely reset the state of the node to
         * reflect the data for the header.
         */
        updateHeaderNode(node: HTMLElement, markup: string): void;
        /**
         * Update an item node to reflect the state of a command item.
         *
         * @param node - A node created by a call to `createItemNode`.
         *
         * @param item - The command item holding the data for the node.
         *
         * @param markup - The markup for the item label. This is the
         *   item label text interpolated with `<mark>` tags for the
         *   matching search characters.
         *
         * #### Notes
         * This method should completely reset the state of the node to
         * reflect the data for the command item.
         */
        updateItemNode(node: HTMLElement, item: CommandItem, markup: string): void;
    }
    /**
     * The default implementation of `IRenderer`.
     */
    class Renderer implements IRenderer {
        /**
         * Create a node for a section header.
         *
         * @returns A new node for a section header.
         */
        createHeaderNode(): HTMLElement;
        /**
         * Create a node for a command item.
         *
         * @returns A new node for a command item.
         */
        createItemNode(): HTMLElement;
        /**
         * Update a header node to reflect the given data.
         *
         * @param node - A node created by a call to `createHeaderNode`.
         *
         * @param markup - The markup for the header text. This is the
         *   section category text interpolated with `<mark>` tags for
         *   the matching search characters.
         */
        updateHeaderNode(node: HTMLElement, markup: string): void;
        /**
         * Update an item node to reflect the state of a command item.
         *
         * @param node - A node created by a call to `createItemNode`.
         *
         * @param item - The command item holding the data for the node.
         *
         * @param markup - The markup for the item label. This is the
         *   item label text interpolated with `<mark>` tags for the
         *   matching search characters.
         */
        updateItemNode(node: HTMLElement, item: CommandItem, markup: string): void;
        /**
         * Format a key binding into shortcut text for display.
         *
         * @param binding - The key binding to format. This may be `null`.
         *
         * @returns The formatted shortcut text for display.
         */
        formatShortcut(binding: KeyBinding): string;
    }
    /**
     * The default `Renderer` instance.
     */
    const defaultRenderer: Renderer;
    /**
     * Split a query string into its category and text components.
     *
     * @param query - A query string of the form `(:<category>:)?<text>`.
     *
     * @returns The `category` and `text` components of the query with
     *   leading and trailing whitespace removed.
     */
    function splitQuery(query: string): {
        category: string;
        text: string;
    };
    /**
     * Join category and text components into a query string.
     *
     * @param category - The category for the query or an empty string.
     *
     * @param text - The text for the query or an empty string.
     *
     * @returns The joined query string for the components.
     */
    function joinQuery(category: string, text: string): string;
}
