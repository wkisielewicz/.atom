;; Analyzed by ClojureScript 1.7.228
{:name proto-repl.edn-reader, :doc "Defines a functions for working with EDN.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {r cljs.reader, fipp fipp.edn, w clojure.walk, cljs.nodejs cljs.nodejs, nodejs cljs.nodejs, fipp.edn fipp.edn, proto-repl.edn-reader.display proto-repl.edn-reader.display, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, clojure.walk clojure.walk, d proto-repl.edn-reader.display}, :imports nil, :defs {parse {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src-cljs/proto_repl/edn_reader.cljs", :line 17, :column 16, :end-line 17, :end-column 21, :export true, :arglists (quote ([s])), :doc "Parses EDN into a JavaScript data."}, :name proto-repl.edn-reader/parse, :variadic false, :file "src-cljs/proto_repl/edn_reader.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parses EDN into a JavaScript data."}, pretty-print {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src-cljs/proto_repl/edn_reader.cljs", :line 23, :column 16, :end-line 23, :end-column 28, :export true, :arglists (quote ([s])), :doc "Reads in EDN data and pretty prints it to a string."}, :name proto-repl.edn-reader/pretty-print, :variadic false, :file "src-cljs/proto_repl/edn_reader.cljs", :end-column 28, :method-params ([s]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Reads in EDN data and pretty prints it to a string."}, js-to-edn {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src-cljs/proto_repl/edn_reader.cljs", :line 29, :column 16, :end-line 29, :end-column 25, :export true, :arglists (quote ([js-data])), :doc "Converts javascript data to EDN. keywordizes keys"}, :name proto-repl.edn-reader/js-to-edn, :variadic false, :file "src-cljs/proto_repl/edn_reader.cljs", :end-column 25, :method-params ([js-data]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([js-data])), :doc "Converts javascript data to EDN. keywordizes keys"}, to-display-tree {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src-cljs/proto_repl/edn_reader.cljs", :line 37, :column 16, :end-line 37, :end-column 31, :export true, :arglists (quote ([v])), :doc "Converts the edn string into a displayable tree. A tree is a vector whose first\n   element is a string of the root of the tree. The rest of the elements are branches\n   off the root. Each branch is another tree. A leaf is represented by a vector\n   of one element."}, :name proto-repl.edn-reader/to-display-tree, :variadic false, :file "src-cljs/proto_repl/edn_reader.cljs", :end-column 31, :method-params ([v]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Converts the edn string into a displayable tree. A tree is a vector whose first\n   element is a string of the root of the tree. The rest of the elements are branches\n   off the root. Each branch is another tree. A leaf is represented by a vector\n   of one element."}, saved-values-to-display-trees {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src-cljs/proto_repl/edn_reader.cljs", :line 45, :column 16, :end-line 45, :end-column 45, :export true, :arglists (quote ([uniq-ids-to-values-str])), :doc "Converts values saved using proto-repl-lib proto-repl/save into a displayable\n   table for displaying inline."}, :name proto-repl.edn-reader/saved-values-to-display-trees, :variadic false, :file "src-cljs/proto_repl/edn_reader.cljs", :end-column 45, :method-params ([uniq-ids-to-values-str]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uniq-ids-to-values-str])), :doc "Converts values saved using proto-repl-lib proto-repl/save into a displayable\n   table for displaying inline."}, -main {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src-cljs/proto_repl/edn_reader.cljs", :line 58, :column 7, :end-line 58, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name proto-repl.edn-reader/-main, :variadic true, :file "src-cljs/proto_repl/edn_reader.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}}}