;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name fipp.edn, :imports nil, :requires {fipp.ednize fipp.ednize, fipp.visit fipp.visit, fipp.engine fipp.engine}, :uses {pprint-document fipp.engine, visit* fipp.visit, record->tagged fipp.ednize, visit fipp.visit, edn fipp.ednize}, :defs {pretty-coll {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/fipp/edn.cljc", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([{:keys [print-level print-length], :as printer} open xs sep close f]))}, :name fipp.edn/pretty-coll, :variadic false, :file "../lib/proto_repl/fipp/edn.cljc", :end-column 18, :method-params ([p__11544 open xs sep close f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 6, :fn-var true, :arglists (quote ([{:keys [print-level print-length], :as printer} open xs sep close f]))}, EdnPrinter {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection fipp.visit/IVisitor cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name fipp.edn/EdnPrinter, :file "../lib/proto_repl/fipp/edn.cljc", :end-column 22, :type true, :column 12, :internal-ctor true, :line 21, :record true, :end-line 21, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->EdnPrinter {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/fipp/edn.cljc", :line 21, :column 12, :end-line 21, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([symbols print-meta print-length print-level]))}, :name fipp.edn/->EdnPrinter, :variadic false, :file "../lib/proto_repl/fipp/edn.cljc", :end-column 22, :method-params ([symbols print-meta print-length print-level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 21, :end-line 21, :max-fixed-arity 4, :fn-var true, :arglists (quote ([symbols print-meta print-length print-level]))}, map->EdnPrinter {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/fipp/edn.cljc", :line 21, :column 12, :end-line 21, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__11553]))}, :name fipp.edn/map->EdnPrinter, :variadic false, :file "../lib/proto_repl/fipp/edn.cljc", :end-column 22, :method-params ([G__11553]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__11553]))}, pprint {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/fipp/edn.cljc", :line 91, :column 7, :end-line 91, :end-column 13, :arglists (quote ([x] [x options])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}}, :name fipp.edn/pprint, :variadic false, :file "../lib/proto_repl/fipp/edn.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}, :method-params ([x] [x options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x options])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:align :group :print-meta symbols :print-level print-meta print-level :line :print-length :form :tag print-length :symbols :text :span}, :order [:print-level :print-length :span :group :align :symbols :print-meta :line :text :tag :form symbols print-meta print-length print-level]}, :doc "Provides a pretty document serializer and pprint fn for Clojure/EDN forms.\n  See fipp.clojure for pretty printing Clojure code."}