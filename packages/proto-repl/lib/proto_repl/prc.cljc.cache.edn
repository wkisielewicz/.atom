;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name prc, :imports nil, :requires {g proto-repl-charts.graph, proto-repl-charts.graph proto-repl-charts.graph}, :uses nil, :defs {error {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([msg]))}, :name prc/error, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, table-input->matrix {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 10, :column 8, :end-line 10, :end-column 27, :private true, :arglists (quote ([table-input])), :doc "Converts table input into a sequence of sequences. Assumes table input is\n  either already a sequence a sequences or a sequence of maps. Throws an exception\n  otherwise."}, :private true, :name prc/table-input->matrix, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 27, :method-params ([table-input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([table-input])), :doc "Converts table input into a sequence of sequences. Assumes table input is\n  either already a sequence a sequences or a sequence of maps. Throws an exception\n  otherwise."}, graph {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([name graph-data] [name graph-data options])), :doc "Takes graph data representing nodes and edges and displays it in Atom using\n   vis.js. (http://http://visjs.org/).\n   Arguments:\n   * name - The name to put in the tab title. Will replace an existing tag with\n     the same name.\n   * graph-data - Can be a loom graph or a map containing a sequence of nodes and\n     edges. Nodes can be a sequence of identifiers (strings, numbers, keys) or\n     can be a map containing data matching description here:\n     http://visjs.org/docs/network/nodes.html. Edges can be a sequence of 2 item\n     sequences or maps containing any of the fields described here:\n     http://visjs.org/docs/network/edges.html\n   * options - Optional map of visjs network options. See http://visjs.org/docs/network/", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name graph-data] [name graph-data options]), :arglists ([name graph-data] [name graph-data options]), :arglists-meta (nil nil)}}, :name prc/graph, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name graph-data] [name graph-data options]), :arglists ([name graph-data] [name graph-data options]), :arglists-meta (nil nil)}, :method-params ([name graph-data] [name graph-data options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists ([name graph-data] [name graph-data options]), :doc "Takes graph data representing nodes and edges and displays it in Atom using\n   vis.js. (http://http://visjs.org/).\n   Arguments:\n   * name - The name to put in the tab title. Will replace an existing tag with\n     the same name.\n   * graph-data - Can be a loom graph or a map containing a sequence of nodes and\n     edges. Nodes can be a sequence of identifiers (strings, numbers, keys) or\n     can be a map containing data matching description here:\n     http://visjs.org/docs/network/nodes.html. Edges can be a sequence of 2 item\n     sequences or maps containing any of the fields described here:\n     http://visjs.org/docs/network/edges.html\n   * options - Optional map of visjs network options. See http://visjs.org/docs/network/"}, table {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 63, :column 7, :end-line 63, :end-column 12, :arglists (quote ([name rows])), :doc "Displays the data in a table in a tab with the given name. rows can either be\n  a sequence of sequences or a sequence of maps."}, :name prc/table, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 12, :method-params ([name rows]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name rows])), :doc "Displays the data in a table in a tab with the given name. rows can either be\n  a sequence of sequences or a sequence of maps."}, custom-chart {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 73, :column 7, :end-line 73, :end-column 19, :arglists (quote ([name chart-config])), :doc "Displays a custom chart in a tab with the given name. [C3](http://c3js.org/)\n  is the charting library used. The chart config will be converted from Clojure\n  to a JavaScript object and passed to C3. It can be any configuration data C3\n  supports."}, :name prc/custom-chart, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 19, :method-params ([name chart-config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name chart-config])), :doc "Displays a custom chart in a tab with the given name. [C3](http://c3js.org/)\n  is the charting library used. The chart config will be converted from Clojure\n  to a JavaScript object and passed to C3. It can be any configuration data C3\n  supports."}, process-options {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 85, :column 8, :end-line 85, :end-column 23, :private true, :arglists (quote ([chart options])), :doc "Processes the options modifying the chart as necessary."}, :private true, :name prc/process-options, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 23, :method-params ([chart options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chart options])), :doc "Processes the options modifying the chart as necessary."}, line-chart {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 93, :column 7, :end-line 93, :end-column 17, :arglists (quote ([name series-map] [name series-map options])), :doc "Displays a line chart in a tab with the given name.\n\n  series-map is a map of series names to the values for the series. For example\n  the following map would display two lines named 'alpha' and 'beta' on the\n  same graph.\n\n      {:alpha [1 2 3 4] :beta [10 20 30 40]}\n\n  Options can be any of the following:\n  * labels - a list of labels to give each value. The index of the label in the\n  list corresponds to the index of the values in the series.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name series-map] [name series-map options]), :arglists ([name series-map] [name series-map options]), :arglists-meta (nil nil)}}, :name prc/line-chart, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name series-map] [name series-map options]), :arglists ([name series-map] [name series-map options]), :arglists-meta (nil nil)}, :method-params ([name series-map] [name series-map options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists ([name series-map] [name series-map options]), :doc "Displays a line chart in a tab with the given name.\n\n  series-map is a map of series names to the values for the series. For example\n  the following map would display two lines named 'alpha' and 'beta' on the\n  same graph.\n\n      {:alpha [1 2 3 4] :beta [10 20 30 40]}\n\n  Options can be any of the following:\n  * labels - a list of labels to give each value. The index of the label in the\n  list corresponds to the index of the values in the series."}, bar-chart {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 111, :column 7, :end-line 111, :end-column 16, :arglists (quote ([name series-map] [name series-map options])), :doc "Displays a bar chart in a tab with the given name.\n\n  series-map is a map of series names to the values for the series. For example\n  the following map would display two sets of bars named 'alpha' and 'beta'.\n\n  {:alpha [1 2 3 4] :beta [10 20 30 40]}\n\n  Options can be any of the following:\n  * labels - a list of labels to give each value. The index of the label in the\n  list corresponds to the index of the values in the series.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name series-map] [name series-map options]), :arglists ([name series-map] [name series-map options]), :arglists-meta (nil nil)}}, :name prc/bar-chart, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name series-map] [name series-map options]), :arglists ([name series-map] [name series-map options]), :arglists-meta (nil nil)}, :method-params ([name series-map] [name series-map options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 3, :fn-var true, :arglists ([name series-map] [name series-map options]), :doc "Displays a bar chart in a tab with the given name.\n\n  series-map is a map of series names to the values for the series. For example\n  the following map would display two sets of bars named 'alpha' and 'beta'.\n\n  {:alpha [1 2 3 4] :beta [10 20 30 40]}\n\n  Options can be any of the following:\n  * labels - a list of labels to give each value. The index of the label in the\n  list corresponds to the index of the values in the series."}, scatter-chart {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/prc.cljc", :line 129, :column 7, :end-line 129, :end-column 20, :arglists (quote ([name series] [name series options])), :doc "Displays a scatter chart in a tab with the given name.\n\n  series-map is a map of series names to the values for the series. For example\n  the following map would display two sets of points named 'alpha' and 'beta'.\n\n  {:alpha [1 2 3 4] :beta [10 20 30 40]}\n\n  Options can be any of the following:\n  * labels - a list of labels to give each value. The index of the label in the\n  list corresponds to the index of the values in the series.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name series] [name series options]), :arglists ([name series] [name series options]), :arglists-meta (nil nil)}}, :name prc/scatter-chart, :variadic false, :file "../lib/proto_repl/prc.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([name series] [name series options]), :arglists ([name series] [name series options]), :arglists-meta (nil nil)}, :method-params ([name series] [name series options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists ([name series] [name series options]), :doc "Displays a scatter chart in a tab with the given name.\n\n  series-map is a map of series names to the values for the series. For example\n  the following map would display two sets of points named 'alpha' and 'beta'.\n\n  {:alpha [1 2 3 4] :beta [10 20 30 40]}\n\n  Options can be any of the following:\n  * labels - a list of labels to give each value. The index of the label in the\n  list corresponds to the index of the values in the series."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:labels :name :proto-repl-code-execution-extension :type :categories :x :json :axis :data}, :order [:proto-repl-code-execution-extension :type :name :data :labels :axis :x :categories :json]}, :doc "Defines functions that allow the display of charts or tables."}