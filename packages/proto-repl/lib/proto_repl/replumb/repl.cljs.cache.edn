;; Analyzed by ClojureScript 1.7.228
{:use-macros {with-compiler-env cljs.env.macros}, :excludes #{find-ns ns-publics ns-interns load-file}, :name replumb.repl, :imports nil, :requires {cljs.tools.reader.impl.commons cljs.tools.reader.impl.commons, cljs cljs.js, load replumb.load, cljs.tools.reader cljs.tools.reader, replumb.load replumb.load, tags cljs.tagged-literals, r cljs.tools.reader, cljs.js cljs.js, rc cljs.tools.reader.impl.commons, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.env cljs.env, ana cljs.analyzer, replumb.cache replumb.cache, browser replumb.browser, docs replumb.doc-maps, cljs.pprint cljs.pprint, cljs.tagged-literals cljs.tagged-literals, ast replumb.ast, nodejs replumb.nodejs, env cljs.env, s clojure.string, replumb.doc-maps replumb.doc-maps, replumb.browser replumb.browser, cljs.analyzer cljs.analyzer, common replumb.common, cache replumb.cache, cljs.repl cljs.repl, replumb.ast replumb.ast, rt cljs.tools.reader.reader-types, clojure.string clojure.string, replumb.nodejs replumb.nodejs, repl cljs.repl, replumb.common replumb.common}, :uses {pprint cljs.pprint}, :defs {file-path-from-foreign-libs {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 252, :column 7, :end-line 252, :end-column 34, :arglists (quote ([name foreign-libs])), :doc "Retrieves the path for a file from the user provided :foreign-libs option.\n  If not found, returns nil."}, :name replumb.repl/file-path-from-foreign-libs, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 34, :method-params ([name foreign-libs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name foreign-libs])), :doc "Retrieves the path for a file from the user provided :foreign-libs option.\n  If not found, returns nil."}, auto-init-opts {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 796, :column 7, :end-line 796, :end-column 21, :arglists (quote ([opts])), :doc "Just assoc the options to persist to the input map."}, :name replumb.repl/auto-init-opts, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 21, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 796, :end-line 796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Just assoc the options to persist to the input map."}, success-map {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 366, :column 7, :end-line 366, :end-column 18, :arglists (quote ([opts form warning value])), :doc "Builds the map to return when the evaluation returned success.\n  Supports the following options:\n\n  * :no-pr-str-on-value avoids wrapping value in pr-str."}, :name replumb.repl/success-map, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([opts form warning value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts form warning value])), :doc "Builds the map to return when the evaluation returned success.\n  Supports the following options:\n\n  * :no-pr-str-on-value avoids wrapping value in pr-str."}, valid-opts {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 317, :column 7, :end-line 317, :end-column 17, :arglists (quote ([user-opts])), :doc "Validate the input user options. Returns a new map without invalid\n  ones according to valid-opts-set."}, :name replumb.repl/valid-opts, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 17, :method-params ([user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 1, :fn-var true, :arglists (quote ([user-opts])), :doc "Validate the input user options. Returns a new map without invalid\n  ones according to valid-opts-set."}, needs-init-from-opts-state {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 808, :column 7, :end-line 808, :end-column 33, :arglists (quote ([old-app-env new-opts])), :doc "Update the :previous-auto-init-opts and, if necessary, also\n  turns :needs-init? to true, concretely deciding whether when need to\n  initialise again. Move the state to \"Needs Init\"."}, :name replumb.repl/needs-init-from-opts-state, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 33, :method-params ([old-app-env new-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 808, :end-line 808, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old-app-env new-opts])), :doc "Update the :previous-auto-init-opts and, if necessary, also\n  turns :needs-init? to true, concretely deciding whether when need to\n  initialise again. Move the state to \"Needs Init\"."}, initialized-state {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 788, :column 7, :end-line 788, :end-column 24, :arglists (quote ([old-app-env])), :doc "Move the state to \"Initialized\", signaling that the init is not in\n  progress and done."}, :name replumb.repl/initialized-state, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 24, :method-params ([old-app-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 788, :end-line 788, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-app-env])), :doc "Move the state to \"Initialized\", signaling that the init is not in\n  progress and done."}, fetch-source {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 635, :column 7, :end-line 635, :end-column 19, :arglists (quote ([{:keys [verbose read-file-fn!]} var paths-to-try cb]))}, :name replumb.repl/fetch-source, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 19, :method-params ([p__13604 var paths-to-try cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 635, :end-line 635, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [verbose read-file-fn!]} var paths-to-try cb]))}, process-apropos {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 687, :column 7, :end-line 687, :end-column 22, :arglists (quote ([opts cb data str-or-pattern]))}, :name replumb.repl/process-apropos, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 22, :method-params ([opts cb data str-or-pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data str-or-pattern]))}, doc-map-special-symbols {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 577, :column 7, :end-line 577, :end-column 30, :arglists (quote ([sym]))}, :name replumb.repl/doc-map-special-symbols, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 30, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 577, :end-line 577, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, make-load-fn {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 259, :column 7, :end-line 259, :end-column 19, :arglists (quote ([{:keys [verbose src-paths read-file-fn! cache foreign-libs :as user-opts]}])), :doc "Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn!. It returns a cljs.js-compatible\n  *load-fn*. Both src-paths and read-file-fn! are values in the options map\n  passed as parameter.\n\n  Read-file-fn! is an async 2-arity function with signature [file-path\n  src-cb] where src-cb is itself a function (fn [source] ...) that needs\n  to be called with the full source of the library (as string).\n\n  If additionally the user map contains the :cache map the loading process\n  will consider cached files as follow: if :path is present, it will try to load\n  the cached files from the given path. If :src-paths-lookup? is present, it\n  will try to load the cached files from src-paths."}, :name replumb.repl/make-load-fn, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 19, :method-params ([p__13523]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [verbose src-paths read-file-fn! cache foreign-libs :as user-opts]}])), :doc "Makes a load function that will read from a sequence of src-paths\n  using a supplied read-file-fn!. It returns a cljs.js-compatible\n  *load-fn*. Both src-paths and read-file-fn! are values in the options map\n  passed as parameter.\n\n  Read-file-fn! is an async 2-arity function with signature [file-path\n  src-cb] where src-cb is itself a function (fn [source] ...) that needs\n  to be called with the full source of the library (as string).\n\n  If additionally the user map contains the :cache map the loading process\n  will consider cached files as follow: if :path is present, it will try to load\n  the cached files from the given path. If :src-paths-lookup? is present, it\n  will try to load the cached files from src-paths."}, reset-env! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 982, :column 7, :end-line 982, :end-column 17, :arglists (quote ([] [opts] [opts namespaces])), :doc "It does the following (in order):\n\n  1. in-ns to cljs.user\n  2. remove the input namespaces from the compiler environment\n  3. reset the last warning\n  4. set *e to nil\n\n  It accepts a sequence of symbols or strings.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [opts] [opts namespaces]), :arglists ([] [opts] [opts namespaces]), :arglists-meta (nil nil nil)}}, :name replumb.repl/reset-env!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [opts] [opts namespaces]), :arglists ([] [opts] [opts namespaces]), :arglists-meta (nil nil nil)}, :method-params ([] [opts] [opts namespaces]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 982, :end-line 982, :max-fixed-arity 2, :fn-var true, :arglists ([] [opts] [opts namespaces]), :doc "It does the following (in order):\n\n  1. in-ns to cljs.user\n  2. remove the input namespaces from the compiler environment\n  3. reset the last warning\n  4. set *e to nil\n\n  It accepts a sequence of symbols or strings."}, validated-call-back! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 404, :column 7, :end-line 404, :end-column 27, :arglists (quote ([opts cb res]))}, :name replumb.repl/validated-call-back!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 27, :method-params ([opts cb res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts cb res]))}, process-dir {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 679, :column 7, :end-line 679, :end-column 18, :arglists (quote ([opts cb data sym]))}, :name replumb.repl/process-dir, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([opts cb data sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 679, :end-line 679, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data sym]))}, custom-warning-handler {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 391, :column 7, :end-line 391, :end-column 29, :arglists (quote ([opts cb warning-type env extra])), :doc "Handles the case when the evaluation returns a warning and can be\n  passed as a warning handler when partially applied. At the moment it\n  treats warnings as errors."}, :name replumb.repl/custom-warning-handler, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 29, :method-params ([opts cb warning-type env extra]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts cb warning-type env extra])), :doc "Handles the case when the evaluation returns a warning and can be\n  passed as a warning handler when partially applied. At the moment it\n  treats warnings as errors."}, needs-init-state {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 801, :column 7, :end-line 801, :end-column 23, :arglists (quote ([old-app-env])), :doc "Reset the initialization state, moving to \"Needs Init\", signaling\n  that the we need to initialize the app."}, :name replumb.repl/needs-init-state, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 23, :method-params ([old-app-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 801, :end-line 801, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-app-env])), :doc "Reset the initialization state, moving to \"Needs Init\", signaling\n  that the we need to initialize the app."}, make-ns-form {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 211, :column 7, :end-line 211, :end-column 19, :arglists (quote ([kind specs target-ns]))}, :name replumb.repl/make-ns-form, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 19, :method-params ([kind specs target-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 3, :fn-var true, :arglists (quote ([kind specs target-ns]))}, persist-init-opts! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 825, :column 7, :end-line 825, :end-column 25, :arglists (quote ([opts])), :doc "Persist the options necessary to the initialization FSM to work."}, :name replumb.repl/persist-init-opts!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 25, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 825, :end-line 825, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Persist the options necessary to the initialization FSM to work."}, process-in-ns {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 611, :column 7, :end-line 611, :end-column 20, :arglists (quote ([opts cb data ns-string]))}, :name replumb.repl/process-in-ns, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 20, :method-params ([opts cb data ns-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 611, :end-line 611, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data ns-string]))}, make-js-eval-fn {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 121, :column 7, :end-line 121, :end-column 22, :arglists (quote ([opts])), :doc "Makes an eval function that will be used to eval JavaScript code. It returns\n  a cljs.js-compatible *eval-fn*. Expects a map of user options, specifically:\n\n  * :cache - a map containing an optional :path key which indicates the path\n  in which write the cached files. If not empty, the function will first write\n  the cached files and then eval the source, otherwise only the latter\n  * write-file-fn! - a synchronous 2-arity function which expects the path and\n  data to write."}, :name replumb.repl/make-js-eval-fn, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 22, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Makes an eval function that will be used to eval JavaScript code. It returns\n  a cljs.js-compatible *eval-fn*. Expects a map of user options, specifically:\n\n  * :cache - a map containing an optional :path key which indicates the path\n  in which write the cached files. If not empty, the function will first write\n  the cached files and then eval the source, otherwise only the latter\n  * write-file-fn! - a synchronous 2-arity function which expects the path and\n  data to write."}, reset-last-warning! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 387, :column 7, :end-line 387, :end-column 26, :arglists (quote ([]))}, :name replumb.repl/reset-last-warning!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, process-doc {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 583, :column 7, :end-line 583, :end-column 18, :arglists (quote ([opts cb data sym]))}, :name replumb.repl/process-doc, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([opts cb data sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 583, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data sym]))}, normalize-opts {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 351, :column 7, :end-line 351, :end-column 21, :arglists (quote ([user-opts])), :doc "Process the user options. Returns the map that can be fed to\n  read-eval-call."}, :name replumb.repl/normalize-opts, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 21, :method-params ([user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([user-opts])), :doc "Process the user options. Returns the map that can be fed to\n  read-eval-call."}, call-back! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 463, :column 7, :end-line 463, :end-column 17, :arglists (quote ([opts cb res] [opts cb data res])), :doc "Handles the evaluation result, calling the callback in the right way,\n  based on the success or error of the evaluation. The res parameter\n  expects the same map as ClojureScript's cljs.js callback,\n  :value if success and :error if not. The data parameter might contain\n  additional stuff:\n\n  * :form the source form that has been eval-ed\n  * :on-success-fn! 0-arity function that will be executed on success\n  * :on-error-fn! 0-arity function that will be executed on error\n  * :side-effect-fn! 0-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!\n\n  Call-back! supports the following opts:\n\n  * :verbose will enable the evaluation logging, defaults to false.\n  * :no-pr-str-on-value avoids wrapping successful value in a pr-str\n  * :warning-as-error will consider a warning like an error\n\n  Notes:\n  1. The opts map passed here overrides the environment options.\n  2. This function will also clear the :last-eval-warning flag in\n  app-env.\n  3. It will execute (:side-effect-fn!) or (on-success-fn!)\n  and (on-error-fn!)  *before* the callback is called.\n\n  ** Every function in this namespace should call call-back! as\n  single point of exit. **", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([opts cb res] [opts cb data res]), :arglists ([opts cb res] [opts cb data res]), :arglists-meta (nil nil)}}, :name replumb.repl/call-back!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([opts cb res] [opts cb data res]), :arglists ([opts cb res] [opts cb data res]), :arglists-meta (nil nil)}, :method-params ([opts cb res] [opts cb data res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 4, :fn-var true, :arglists ([opts cb res] [opts cb data res]), :doc "Handles the evaluation result, calling the callback in the right way,\n  based on the success or error of the evaluation. The res parameter\n  expects the same map as ClojureScript's cljs.js callback,\n  :value if success and :error if not. The data parameter might contain\n  additional stuff:\n\n  * :form the source form that has been eval-ed\n  * :on-success-fn! 0-arity function that will be executed on success\n  * :on-error-fn! 0-arity function that will be executed on error\n  * :side-effect-fn! 0-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!\n\n  Call-back! supports the following opts:\n\n  * :verbose will enable the evaluation logging, defaults to false.\n  * :no-pr-str-on-value avoids wrapping successful value in a pr-str\n  * :warning-as-error will consider a warning like an error\n\n  Notes:\n  1. The opts map passed here overrides the environment options.\n  2. This function will also clear the :last-eval-warning flag in\n  app-env.\n  3. It will execute (:side-effect-fn!) or (on-success-fn!)\n  and (on-error-fn!)  *before* the callback is called.\n\n  ** Every function in this namespace should call call-back! as\n  single point of exit. **"}, error-map {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 379, :column 7, :end-line 379, :end-column 16, :arglists (quote ([opts form warning error])), :doc "Builds the map to return when the evaluation returned error."}, :name replumb.repl/error-map, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 16, :method-params ([opts form warning error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts form warning error])), :doc "Builds the map to return when the evaluation returned error."}, init-closure-index! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 835, :column 7, :end-line 835, :end-column 26, :arglists (quote ([opts])), :doc "Create and swap in app-env a map from Google Closure provide string\n  to their respective path (without extension).  It merges with the\n  current map if many deps.js are on the source path, precedence to the\n  last (as per merge)."}, :name replumb.repl/init-closure-index!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 26, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 835, :end-line 835, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Create and swap in app-env a map from Google Closure provide string\n  to their respective path (without extension).  It merges with the\n  current map if many deps.js are on the source path, precedence to the\n  last (as per merge)."}, read {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 62, :column 7, :end-line 62, :end-column 11, :arglists (quote ([opts rdr])), :doc "Reading forms from a reader (see clojure.tools.reader.reader-types\n  for reader implementations). This function throws if a valid form\n  cannot be found."}, :name replumb.repl/read, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 11, :method-params ([opts rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts rdr])), :doc "Reading forms from a reader (see clojure.tools.reader.reader-types\n  for reader implementations). This function throws if a valid form\n  cannot be found."}, ns-form? {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 83, :column 7, :end-line 83, :end-column 15, :arglists (quote ([form]))}, :name replumb.repl/ns-form?, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 15, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, init-repl-if-necessary! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 880, :column 7, :end-line 880, :end-column 30, :arglists (quote ([opts data]))}, :name replumb.repl/init-repl-if-necessary!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 30, :method-params ([opts data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 880, :end-line 880, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts data]))}, initializing-state {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 778, :column 7, :end-line 778, :end-column 25, :arglists (quote ([old-app-env])), :doc "If we are not already :initializing? and :needs-init? is true, then\n  move to the \"Initializing\" state, signaling that the init is in\n  progress."}, :name replumb.repl/initializing-state, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 25, :method-params ([old-app-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 778, :end-line 778, :max-fixed-arity 1, :fn-var true, :arglists (quote ([old-app-env])), :doc "If we are not already :initializing? and :needs-init? is true, then\n  move to the \"Initializing\" state, signaling that the init is in\n  progress."}, self-require? {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 173, :column 7, :end-line 173, :end-column 20, :arglists (quote ([specs]))}, :name replumb.repl/self-require?, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 20, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, process-pst {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 597, :column 7, :end-line 597, :end-column 18, :arglists (quote ([opts cb data expr]))}, :name replumb.repl/process-pst, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([opts cb data expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 597, :end-line 597, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data expr]))}, init-option-set {:name replumb.repl/init-option-set, :file "../lib/proto_repl/replumb/repl.cljs", :line 774, :column 1, :end-line 774, :end-column 21, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 774, :column 6, :end-line 774, :end-column 21}}, add-init-fns {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 342, :column 7, :end-line 342, :end-column 19, :arglists (quote ([opts user-opts])), :doc "Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."}, :name replumb.repl/add-init-fns, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 19, :method-params ([opts user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 342, :end-line 342, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts user-opts])), :doc "Given current and user options, returns a map containing a\n  valid :init-fns,conjoining with the one in current if necessary."}, add-default-opts {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 323, :column 7, :end-line 323, :end-column 23, :arglists (quote ([opts user-opts])), :doc "Given user provided options, conjoins the default option map for\n  its :target (string or keyword). Defaults to conjoining :default (browser,\n  aka :js target)."}, :name replumb.repl/add-default-opts, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 23, :method-params ([opts user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts user-opts])), :doc "Given user provided options, conjoins the default option map for\n  its :target (string or keyword). Defaults to conjoining :default (browser,\n  aka :js target)."}, purge-ns! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 194, :column 7, :end-line 194, :end-column 16, :arglists (quote ([st ns]))}, :name replumb.repl/purge-ns!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 16, :method-params ([st ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([st ns]))}, reset-init-opts! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 830, :column 7, :end-line 830, :end-column 23, :arglists (quote ([])), :doc "Reset the initialization persisted options."}, :name replumb.repl/reset-init-opts!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 830, :end-line 830, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Reset the initialization persisted options."}, get-var {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 107, :column 7, :end-line 107, :end-column 14, :arglists (quote ([opts env sym]))}, :name replumb.repl/get-var, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 14, :method-params ([opts env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts env sym]))}, process-load-file {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 735, :column 7, :end-line 735, :end-column 24, :arglists (quote ([{:keys [verbose read-file-fn! src-paths], :as opts} cb data file-name]))}, :name replumb.repl/process-load-file, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 24, :method-params ([p__13649 cb data file-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 735, :end-line 735, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [verbose read-file-fn! src-paths], :as opts} cb data file-name]))}, map-keys {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 58, :column 7, :end-line 58, :end-column 15, :arglists (quote ([f m]))}, :name replumb.repl/map-keys, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 15, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, process-find-doc {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 700, :column 7, :end-line 700, :end-column 23, :arglists (quote ([opts cb data re-string-or-pattern]))}, :name replumb.repl/process-find-doc, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 23, :method-params ([opts cb data re-string-or-pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data re-string-or-pattern]))}, process-source {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 663, :column 7, :end-line 663, :end-column 21, :arglists (quote ([opts cb data sym]))}, :name replumb.repl/process-source, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 21, :method-params ([opts cb data sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 663, :end-line 663, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data sym]))}, add-load-fn {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 332, :column 7, :end-line 332, :end-column 18, :arglists (quote ([opts user-opts])), :doc "Given current and user options, if :load-fn! is present in user-opts,\n  conjoins it. Try to create and conjoin one from :src-paths\n  and :read-file-fn! otherwise. Conjoins nil if it cannot."}, :name replumb.repl/add-load-fn, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([opts user-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts user-opts])), :doc "Given current and user options, if :load-fn! is present in user-opts,\n  conjoins it. Try to create and conjoin one from :src-paths\n  and :read-file-fn! otherwise. Conjoins nil if it cannot."}, repl-special? {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 117, :column 7, :end-line 117, :end-column 20, :arglists (quote ([form]))}, :name replumb.repl/repl-special?, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 20, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, last-form {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 724, :column 7, :end-line 724, :end-column 16, :arglists (quote ([source]))}, :name replumb.repl/last-form, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 16, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, file-path-from-goog-dependencies {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 242, :column 7, :end-line 242, :end-column 39, :arglists (quote ([name])), :doc "Retrives the path for a file from (.-dependencies_.nameToPath js/goog). If\n  not found will returns nil."}, :name replumb.repl/file-path-from-goog-dependencies, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 39, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name])), :doc "Retrives the path for a file from (.-dependencies_.nameToPath js/goog). If\n  not found will returns nil."}, process-require {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 553, :column 7, :end-line 553, :end-column 22, :arglists (quote ([opts cb data kind specs]))}, :name replumb.repl/process-require, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 22, :method-params ([opts cb data kind specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 553, :end-line 553, :max-fixed-arity 5, :fn-var true, :arglists (quote ([opts cb data kind specs]))}, validated-init-fn! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 418, :column 7, :end-line 418, :end-column 25, :arglists (quote ([init-fn! res]))}, :name replumb.repl/validated-init-fn!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 25, :method-params ([init-fn! res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 418, :end-line 418, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-fn! res]))}, goog-deps-map {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 227, :column 7, :end-line 227, :end-column 20, :arglists (quote ([deps-js-content])), :doc "Given the content of goog/deps.js file, create a map\n  provide->path (without extension) of Google dependencies.\n\n  Adapted from planck:\n  https://github.com/mfikes/planck/blob/master/planck-cljs/src/planck/repl.cljs#L438-L451"}, :name replumb.repl/goog-deps-map, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 20, :method-params ([deps-js-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deps-js-content])), :doc "Given the content of goog/deps.js file, create a map\n  provide->path (without extension) of Google dependencies.\n\n  Adapted from planck:\n  https://github.com/mfikes/planck/blob/master/planck-cljs/src/planck/repl.cljs#L438-L451"}, warning-error-map! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 436, :column 7, :end-line 436, :end-column 25, :arglists (quote ([opts {:keys [error], :as orig}])), :doc "Checks if there has been a warning and if so will return a new result\n  map instead of the input one, potentially with a :warning key\n  containing the warning message in it.\n\n  The code paths are the following:\n\n  - if the input map was already an :error, there will be no warning,\n  the original :error is returned.\n  - if the input map was a :value:\n    - if (:warning-as-error opts) is truey, the new map will always\n      contain it as :error, overriding the original.\n    - if (:warning-as-error opts) is falsey, the new map will contain\n      the warning as :warning along with the original :value"}, :name replumb.repl/warning-error-map!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 25, :method-params ([opts p__13553]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts {:keys [error], :as orig}])), :doc "Checks if there has been a warning and if so will return a new result\n  map instead of the input one, potentially with a :warning key\n  containing the warning message in it.\n\n  The code paths are the following:\n\n  - if the input map was already an :error, there will be no warning,\n  the original :error is returned.\n  - if the input map was a :value:\n    - if (:warning-as-error opts) is truey, the new map will always\n      contain it as :error, overriding the original.\n    - if (:warning-as-error opts) is falsey, the new map will contain\n      the warning as :warning along with the original :value"}, load-eval-opts! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 167, :column 7, :end-line 167, :end-column 22, :arglists (quote ([opts file-name]))}, :name replumb.repl/load-eval-opts!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 22, :method-params ([opts file-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts file-name]))}, get-goog-path {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 46, :column 7, :end-line 46, :end-column 20, :arglists (quote ([provide])), :doc "Given a Google Closure provide / Clojure require (e.g. goog.string),\n  returns the path to the actual file (without extension)."}, :name replumb.repl/get-goog-path, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 20, :method-params ([provide]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([provide])), :doc "Given a Google Closure provide / Clojure require (e.g. goog.string),\n  returns the path to the actual file (without extension)."}, init-repl! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 859, :column 7, :end-line 859, :end-column 17, :arglists (quote ([opts data])), :doc "The init-repl function. It uses the following opts keys:\n\n  * :init-fns initialization function vector, it will be executed in\n  order\n\n  Data is passed from outside and will be forwarded to :init-fn!."}, :name replumb.repl/init-repl!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 17, :method-params ([opts data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 859, :end-line 859, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts data])), :doc "The init-repl function. It uses the following opts keys:\n\n  * :init-fns initialization function vector, it will be executed in\n  order\n\n  Data is passed from outside and will be forwarded to :init-fn!."}, process-1-2-3 {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 513, :column 7, :end-line 513, :end-column 20, :arglists (quote ([data expression-form value]))}, :name replumb.repl/process-1-2-3, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 20, :method-params ([data expression-form value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 513, :end-line 513, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data expression-form value]))}, empty-analyzer-env {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 52, :column 7, :end-line 52, :end-column 25, :arglists (quote ([]))}, :name replumb.repl/empty-analyzer-env, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, read-string {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 73, :column 7, :end-line 73, :end-column 18, :arglists (quote ([opts s])), :doc "Reading forms from a string. This function throws if a valid one\n  cannot be found."}, :name replumb.repl/read-string, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([opts s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts s])), :doc "Reading forms from a string. This function throws if a valid one\n  cannot be found."}, valid-opts-set {:name replumb.repl/valid-opts-set, :file "../lib/proto_repl/replumb/repl.cljs", :line 310, :column 1, :end-line 310, :end-column 20, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 310, :column 6, :end-line 310, :end-column 20}, :doc "Set of valid option used for external input validation."}, call-side-effect! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 426, :column 7, :end-line 426, :end-column 24, :arglists (quote ([data {:keys [value error]}])), :doc "Execute the correct side effecting function from data.\n  Handles :side-effect-fn!, :on-error-fn! and on-success-fn!."}, :name replumb.repl/call-side-effect!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 24, :method-params ([data p__13548]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data {:keys [value error]}])), :doc "Execute the correct side effecting function from data.\n  Handles :side-effect-fn!, :on-error-fn! and on-success-fn!."}, ex-info-data {:name replumb.repl/ex-info-data, :file "../lib/proto_repl/replumb/repl.cljs", :line 39, :column 1, :end-line 39, :end-column 18, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 39, :column 6, :end-line 39, :end-column 18}, :doc "The ex-info data for this file"}, st {:name replumb.repl/st, :file "../lib/proto_repl/replumb/repl.cljs", :line 27, :column 1, :end-line 27, :end-column 12, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 27, :column 10, :end-line 27, :end-column 12}}, current-ns {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 41, :column 7, :end-line 41, :end-column 17, :arglists (quote ([])), :doc "Return the current namespace, as a symbol."}, :name replumb.repl/current-ns, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current namespace, as a symbol."}, force-init! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 818, :column 7, :end-line 818, :end-column 18, :arglists (quote ([])), :doc "Force the initialization at the next read-eval-call. Use this every\n  time an option that needs to be read at initialization time changes,\n  e.g. :source-path. In the future this will be automated."}, :name replumb.repl/force-init!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 818, :end-line 818, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force the initialization at the next read-eval-call. Use this every\n  time an option that needs to be read at initialization time changes,\n  e.g. :source-path. In the future this will be automated."}, eval-str* {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 521, :column 7, :end-line 521, :end-column 16, :arglists (quote ([eval-opts user-opts cb data source])), :doc "Custom version of cljs.js/eval-str. The only difference is in the\n  spitting of eval-opts, which is the map which the actual\n  cljs.js/eval-str needs and usually built by base-eval-opts!, and\n  user-opts, passed through read-eval-call (same keys supported).\n\n  Additionally, eval-opts might contain:\n\n  * :file-name In case of file loading, indicates its name\n  * :on-success-fn! 1-arity function that will be executed on success,\n  the input is the evaluation result\n  * :on-error-fn! 1-arity function that will be executed on error, the\n  input is the evaluation result\n  * :side-effect-fn! 1-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!. The input is the evaluation result"}, :name replumb.repl/eval-str*, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 16, :method-params ([eval-opts user-opts cb data source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 521, :end-line 521, :max-fixed-arity 5, :fn-var true, :arglists (quote ([eval-opts user-opts cb data source])), :doc "Custom version of cljs.js/eval-str. The only difference is in the\n  spitting of eval-opts, which is the map which the actual\n  cljs.js/eval-str needs and usually built by base-eval-opts!, and\n  user-opts, passed through read-eval-call (same keys supported).\n\n  Additionally, eval-opts might contain:\n\n  * :file-name In case of file loading, indicates its name\n  * :on-success-fn! 1-arity function that will be executed on success,\n  the input is the evaluation result\n  * :on-error-fn! 1-arity function that will be executed on error, the\n  input is the evaluation result\n  * :side-effect-fn! 1-arity function that if present will be executed\n  for both success and error, effectively disabling the individual\n  on-success-fn! and on-error-fn!. The input is the evaluation result"}, app-env {:name replumb.repl/app-env, :file "../lib/proto_repl/replumb/repl.cljs", :line 29, :column 1, :end-line 29, :end-column 17, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 29, :column 10, :end-line 29, :end-column 17}}, process-repl-special {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 754, :column 7, :end-line 754, :end-column 27, :arglists (quote ([opts cb data expression-form]))}, :name replumb.repl/process-repl-special, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 27, :method-params ([opts cb data expression-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 754, :end-line 754, :max-fixed-arity 4, :fn-var true, :arglists (quote ([opts cb data expression-form]))}, resolve {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 93, :column 7, :end-line 93, :end-column 14, :arglists (quote ([opts env sym])), :doc "From cljs.analyzer.api.clj. Given an analysis environment resolve a\n  var. Analogous to clojure.core/resolve"}, :name replumb.repl/resolve, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 14, :method-params ([opts env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts env sym])), :doc "From cljs.analyzer.api.clj. Given an analysis environment resolve a\n  var. Analogous to clojure.core/resolve"}, macro? {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([var])), :doc "Is the input analyzer var (from either cljs.analyzer/resolve-var or\n  cljs.analyzer/resolve-macro-var) a macro?"}, :name replumb.repl/macro?, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 13, :method-params ([var]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([var])), :doc "Is the input analyzer var (from either cljs.analyzer/resolve-var or\n  cljs.analyzer/resolve-macro-var) a macro?"}, replumb-repl-special-set {:name replumb.repl/replumb-repl-special-set, :file "../lib/proto_repl/replumb/repl.cljs", :line 114, :column 1, :end-line 114, :end-column 30, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 114, :column 6, :end-line 114, :end-column 30}}, process-reloads! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 199, :column 7, :end-line 199, :end-column 23, :arglists (quote ([specs]))}, :name replumb.repl/process-reloads!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 23, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, canonicalize-specs {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 185, :column 7, :end-line 185, :end-column 25, :arglists (quote ([specs]))}, :name replumb.repl/canonicalize-specs, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 25, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, base-eval-opts! {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 151, :column 7, :end-line 151, :end-column 22, :arglists (quote ([] [opts])), :doc "Gets the base set of evaluation options. The 1-arity function\n  specifies opts that override default. No check here if opts are\n  valid.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name replumb.repl/base-eval-opts!, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Gets the base set of evaluation options. The 1-arity function\n  specifies opts that override default. No check here if opts are\n  valid."}, read-eval-call {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/replumb/repl.cljs", :line 892, :column 7, :end-line 892, :end-column 21, :arglists (quote ([opts cb source])), :doc "Reads, evaluates and calls back with the evaluation result.\n\n  The first parameter is a map of configuration options, currently\n  supporting:\n\n  * :verbose - will enable the evaluation logging, defaults to false.\n  To customize how to print, use (set! *print-fn* (fn [& args] ...)\n\n  * :warning-as-error - will consider a compiler warning as error\n  * :target - :nodejs and :browser supported, the latter is used if\n  missing\n  * :init-fn! - user provided initialization function, it will be passed\n  a map of data currently containing:\n\n      :form   ;; the form to evaluate, as data, past the reader step\n      :ns     ;; the current namespace, as symbol\n      :target ;; *target* as keyword, :default is the default\n\n  * :load-fn! - will override replumb's default cljs.js/*load-fn*.\n  It rules out :read-file-fn!, losing any perk of using replumb.load\n  helpers. Use it if you know what you are doing.\n\n  * :read-file-fn! an asynchronous 2-arity function with signature\n  [file-path src-cb] where src-cb is itself a function (fn [source] ...)\n  that needs to be called with the file content as string (nil if no\n  file is found). It is mutually exclusive with :load-fn! and will be\n  ignored in case both are present\n\n  * :write-file-fn! a synchronous 2-arity function with signature\n  [file-path data] that accepts a file-path and data to write.\n\n  * :src-paths - a vector of paths containing source files\n\n  * :cache - a map containing two optional values: the first, :path, indicates\n  the path of the cached files. The second, :src-paths-lookup?, indicates\n  if look for cached files in :src-paths. If both present, :path will have\n  the priority but both will be inspected.\n\n  * :no-pr-str-on-value - in case of :success? avoid converting the\n  result map :value to string\n\n  * :context - indicates the evaluation context that will be passed to\n  cljs/eval-str. Defaults to :expr.\n\n  * :foreign-libs - a way to include foreign libraries. The format is analogous\n  to the compiler option. For more info visit https://github.com/clojure/clojurescript/wiki/Compiler-Options#foreign-libs\n\n  The second parameter cb, is a 1-arity function which receives the\n  result map.\n\n  Therefore, given cb (fn [result-map] ...), the main map keys are:\n\n  :success? - a boolean indicating if everything went right\n  :value    - (if (:success? result)), this key contains the yielded value as\n              string, unless :no-pr-str-on-value is true, in which case it\n              returns the bare value.\n  :error    - (if-not (:success? result)) will contain a js/Error\n  :warning  - in case a warning was thrown and :warning-as-error is falsey\n  :form     - the evaluated form as data structure (not a string)\n\n  The third parameter is the source string to be read and evaluated.\n\n  It initializes the repl harness either on first execution or if an\n  option in #{:src-paths :init-fn!} changes from the previous\n  read-eval-call."}, :name replumb.repl/read-eval-call, :variadic false, :file "../lib/proto_repl/replumb/repl.cljs", :end-column 21, :method-params ([opts cb source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 892, :end-line 892, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts cb source])), :doc "Reads, evaluates and calls back with the evaluation result.\n\n  The first parameter is a map of configuration options, currently\n  supporting:\n\n  * :verbose - will enable the evaluation logging, defaults to false.\n  To customize how to print, use (set! *print-fn* (fn [& args] ...)\n\n  * :warning-as-error - will consider a compiler warning as error\n  * :target - :nodejs and :browser supported, the latter is used if\n  missing\n  * :init-fn! - user provided initialization function, it will be passed\n  a map of data currently containing:\n\n      :form   ;; the form to evaluate, as data, past the reader step\n      :ns     ;; the current namespace, as symbol\n      :target ;; *target* as keyword, :default is the default\n\n  * :load-fn! - will override replumb's default cljs.js/*load-fn*.\n  It rules out :read-file-fn!, losing any perk of using replumb.load\n  helpers. Use it if you know what you are doing.\n\n  * :read-file-fn! an asynchronous 2-arity function with signature\n  [file-path src-cb] where src-cb is itself a function (fn [source] ...)\n  that needs to be called with the file content as string (nil if no\n  file is found). It is mutually exclusive with :load-fn! and will be\n  ignored in case both are present\n\n  * :write-file-fn! a synchronous 2-arity function with signature\n  [file-path data] that accepts a file-path and data to write.\n\n  * :src-paths - a vector of paths containing source files\n\n  * :cache - a map containing two optional values: the first, :path, indicates\n  the path of the cached files. The second, :src-paths-lookup?, indicates\n  if look for cached files in :src-paths. If both present, :path will have\n  the priority but both will be inspected.\n\n  * :no-pr-str-on-value - in case of :success? avoid converting the\n  result map :value to string\n\n  * :context - indicates the evaluation context that will be passed to\n  cljs/eval-str. Defaults to :expr.\n\n  * :foreign-libs - a way to include foreign libraries. The format is analogous\n  to the compiler option. For more info visit https://github.com/clojure/clojurescript/wiki/Compiler-Options#foreign-libs\n\n  The second parameter cb, is a 1-arity function which receives the\n  result map.\n\n  Therefore, given cb (fn [result-map] ...), the main map keys are:\n\n  :success? - a boolean indicating if everything went right\n  :value    - (if (:success? result)), this key contains the yielded value as\n              string, unless :no-pr-str-on-value is true, in which case it\n              returns the bare value.\n  :error    - (if-not (:success? result)) will contain a js/Error\n  :warning  - in case a warning was thrown and :warning-as-error is falsey\n  :form     - the evaluated form as data structure (not a string)\n\n  The third parameter is the source string to be read and evaluated.\n\n  It initializes the repl harness either on first execution or if an\n  option in #{:src-paths :init-fn!} changes from the previous\n  read-eval-call."}}, :require-macros {cljs.env.macros cljs.env.macros, cljs cljs.js, cljs.js cljs.js, repl cljs.repl, cljs.repl cljs.repl, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{res & :load :path :features :user-opts :read-file-fn! try doc import :init-fns = :meta :static-fns :else *2 find :macros :previous-init-opts finally :default :ns :def-emits-var :name :as :value :file map? get init-fns :side-effect-fn! find-doc :require :extra :warning-type fn :write-file-fn! :nodejs :read-cond *target* :initializing? string? :verbose old-app-env dir *1 > pst :source :env :last-eval-warning in-ns :merge :allow ns :column or :goog-provide->path :warning require :cache nil? :no-pr-str-on-value *e :needs-init? :line :expr instance? not :macro source :current-ns env :opts :kind :file-name :warning-as-error sym :url :replumb.repl/error :src-paths-lookup? :source-map :context :reload :foreign-libs :provides :error :reload-all :require-macros load-file :form :load-fn! *3 :tag :res :target quote :arglists :import :eof catch :doc count :success? opts :cljs :on-success-fn! :src-paths :init-fn! :on-error-fn! :forms js/Error and symbol? require-macros apropos cljs.user :data :eval}, :order [:current-ns :last-eval-warning :initializing? :needs-init? :previous-init-opts cljs.user :tag :replumb.repl/error :goog-provide->path :ns :context :expr ns :macro map? env symbol? sym :verbose :default :name doc import find-doc dir pst in-ns require source load-file require-macros apropos :path :source :cache :write-file-fn! :source-map :def-emits-var :load :eval :static-fns :load-fn! :file-name :reload :reload-all :import :merge :line :column :provides :file :src-paths :read-file-fn! :foreign-libs :as :user-opts :macros :else :src-paths-lookup? :no-pr-str-on-value :warning-as-error :target :init-fn! :nodejs :init-fns :success? :form :warning :value :error :warning-type :env :extra res find or and get not opts string? nil? instance? js/Error = *target* :side-effect-fn! :on-success-fn! :on-error-fn! :opts :data :res *2 *1 *e *3 quote :kind :require & catch finally fn try :doc :read-cond :features :allow :cljs :meta :forms :arglists :url :eof :require-macros old-app-env > count init-fns]}, :doc nil}