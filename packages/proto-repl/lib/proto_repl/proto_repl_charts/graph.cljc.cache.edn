;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name proto-repl-charts.graph, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {error {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 7, :column 8, :end-line 7, :end-column 13, :private true, :arglists (quote ([& msg-parts])), :doc "Throws an exception containing a message joined from the msg-parts.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(msg-parts)], :arglists ([& msg-parts]), :arglists-meta (nil)}}, :private true, :name proto-repl-charts.graph/error, :variadic true, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(msg-parts)], :arglists ([& msg-parts]), :arglists-meta (nil)}, :method-params [(msg-parts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists ([& msg-parts]), :doc "Throws an exception containing a message joined from the msg-parts."}, expected-msg {:name proto-repl-charts.graph/expected-msg, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :line 15, :column 1, :end-line 15, :end-column 28, :private true, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 15, :column 16, :end-line 15, :end-column 28, :private true}}, nodes->display-data {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 22, :column 7, :end-line 22, :end-column 26, :arglists (quote ([nodes])), :doc "Converts a sequence of nodes into nodes for display."}, :name proto-repl-charts.graph/nodes->display-data, :variadic false, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 26, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Converts a sequence of nodes into nodes for display."}, edges->display-data {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 32, :column 7, :end-line 32, :end-column 26, :arglists (quote ([edges])), :doc "Converts a sequence of edges into edges for display."}, :name proto-repl-charts.graph/edges->display-data, :variadic false, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 26, :method-params ([edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edges])), :doc "Converts a sequence of edges into edges for display."}, map-graph->display-graph {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 47, :column 7, :end-line 47, :end-column 31, :arglists (quote ([mg])), :doc "Converts a graph passed in as a map to a display graph."}, :name proto-repl-charts.graph/map-graph->display-graph, :variadic false, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 31, :method-params ([mg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mg])), :doc "Converts a graph passed in as a map to a display graph."}, loom-graph->display-graph {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 73, :column 16, :end-line 73, :end-column 41, :arglists (quote ([g]))}, :name proto-repl-charts.graph/loom-graph->display-graph, :variadic false, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 41, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g]))}, loom-graph? {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 75, :column 7, :end-line 75, :end-column 18, :arglists (quote ([graph-data]))}, :name proto-repl-charts.graph/loom-graph?, :variadic false, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 18, :method-params ([graph-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([graph-data]))}, convert-graph-data-for-display {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/../lib/proto_repl/proto_repl_charts/graph.cljc", :line 80, :column 7, :end-line 80, :end-column 37, :arglists (quote ([graph-data options])), :doc "Converts graph data into data for display by vis.js."}, :name proto-repl-charts.graph/convert-graph-data-for-display, :variadic false, :file "../lib/proto_repl/proto_repl_charts/graph.cljc", :end-column 37, :method-params ([graph-data options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph-data options])), :doc "Converts graph data into data for display by vis.js."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :nodes :from :label :id :options :edges :to}, :order [:id :label :from :to :else :nodes :edges :options]}, :doc "Contains functions for converting a graphs into display data. Displayed graphs\n   are maps of nodes and edges. Nodes are maps with :id and :label. Edges are\n   maps of :from and :to."}